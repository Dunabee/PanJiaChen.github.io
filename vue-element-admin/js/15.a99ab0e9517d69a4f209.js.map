{"version":3,"sources":["webpack:///js/15.a99ab0e9517d69a4f209.js","webpack:///./src/views/theme/index.vue","webpack:///./src/utils/index.js?d310","webpack:///./~/showdown/dist/showdown.js?d202","webpack:///index.vue?f8f8","webpack:///./src/views/theme/index.vue?730a","webpack:///./src/views/theme/index.vue?afdc","webpack:///./src/views/theme/index.vue?a38d"],"names":["webpackJsonp","319","module","exports","__webpack_require__","Component","492","_interopRequireDefault","obj","__esModule","default","parseTime","time","cFormat","arguments","length","format","date","_typeof3","parseInt","Date","formatObj","y","getFullYear","m","getMonth","d","getDate","h","getHours","i","getMinutes","s","getSeconds","a","getDay","replace","result","key","value","formatTime","option","now","diff","Math","ceil","getQueryObject","url","window","location","href","search","substring","lastIndexOf","reg","rs","$1","$2","name","decodeURIComponent","val","String","getByteLen","len","match","floor","cleanArray","actual","newArray","push","param","json","_keys2","map","undefined","encodeURIComponent","join","html2Text","div","document","createElement","innerHTML","textContent","innerText","objectMerge","target","source","Array","isArray","slice","property","hasOwnProperty","sourceProperty","scrollTo","element","to","duration","difference","scrollTop","perTick","setTimeout","console","log","toggleClass","className","classString","nameIndex","indexOf","substr","getTime","type","toDateString","showdownMD","md","converter","makeHtml","Object","defineProperty","pickerOptions","_keys","_typeof2","_showdown","_showdown2","Converter","text","onClick","picker","end","start","setTime","$emit","524","__WEBPACK_AMD_DEFINE_RESULT__","getDefaultOpts","simple","defaultOptions","omitExtraWLInCodeBlocks","defaultValue","describe","noHeaderId","prefixHeaderId","ghCompatibleHeaderId","headerLevelStart","parseImgDimensions","simplifiedAutoLink","excludeTrailingPunctuationFromURLs","literalMidWordUnderscores","strikethrough","tables","tablesHeaderId","ghCodeBlocks","tasklists","smoothLivePreview","smartIndentationFix","description","disableForced4SpacesIndentedSublists","simpleLineBreaks","requireSpaceBeforeHeadingText","ghMentions","ghMentionsLink","encodeEmails","JSON","parse","stringify","ret","opt","allOptionsOn","options","validate","extension","errMsg","valid","error","showdown","helper","baseMsg","ext","isString","toLowerCase","isUndefined","listeners","filter","regex","ln","RegExp","escapeCharactersCallback","wholeMatch","m1","charCodeAt","parsers","extensions","globalOptions","setFlavor","flavor","github","original","ghost","vanilla","allOn","setOption","this","getOption","getOptions","resetOptions","Error","preset","getFlavor","getFlavorOptions","getDefaultOptions","subParser","func","stdExtName","validExtension","getAllExtensions","removeExtension","resetExtensions","validateExtension","warn","isFunction","getType","toString","call","constructor","forEach","callback","prop","escapeCharacters","charsToEscape","afterBackslash","regexString","rgxFindMatchPos","str","left","right","flags","t","f","g","x","l","pos","exec","test","lastIndex","index","matchRecursiveRegExp","matchPos","results","replaceRecursiveRegExp","replacement","repStr","finalStr","lng","bits","encodeEmailAddress","mail","encode","ch","random","r","msg","alert","regexes","asteriskAndDash","converterOptions","_constructor","gOpt","_parseExtension","legacyExtensionLoading","validExt","langExtensions","outputModifiers","listen","rTrimInputText","rsp","rgx","setConvFlavor","_dispatch","evtName","globals","ei","nText","gHtmlBlocks","gHtmlMdBlocks","gHtmlSpans","gUrls","gTitles","gDimensions","gListLevel","hashLinkCounts","addExtension","useExtension","extensionName","splice","ii","language","output","writeAnchorTag","m2","m3","m4","m5","m6","m7","linkText","linkId","title","wm","st","escape","mentions","username","replaceLink","link","trailingPunctuation","lnkTxt","append","replaceMail","b","simpleURLRegex","simpleURLRegex2","delimUrlRegex","simpleMailRegex","delimMailRegex","bq","pre","pattern","codeblock","nextChar","c","leadingText","numSpaces","repFunc","blockText","blockTags","txt","hashHTMLSpan","html","repText","limit","num","headerId","ghHeaderId","isNaN","setextRegexH1","setextRegexH2","spanGamut","hID","hLevel","hashBlock","matchFound","atxStyle","span","header","writeImageTag","altText","width","height","gDims","inlineRegExp","referenceRegExp","processListItems","listStr","trimTrailing","isParagraphed","taskbtn","checked","trim","item","bulletStyle","otp","wm2","parseConsecutiveLists","list","listType","olRgx","ulRgx","counterRxg","parseCL","grafs","split","grafsOut","grafsOutIt","codeFlag","delim","re","blankLines","parseStyles","sLine","parseHeaders","style","id","tableHeaderId","parseCells","cell","buildTable","headers","cells","tb","tblLgn","tableRgx","rawTable","tableLines","rawHeaders","rawStyles","rawCells","styles","shift","row","charCodeToReplace","fromCharCode","591","_utils","data","theme","tags","inputVisible","inputValue","watch","body","methods","629","version","sources","names","mappings","file","sourcesContent","sourceRoot","686","content","locals","762","render","_vm","_h","$createElement","_c","_self","staticClass","_v","slot","staticStyle","line-height","attrs","on-text","off-text","model","$$v","expression","_l","tag","_s","staticRenderFns"],"mappings":"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","file":"js/15.a99ab0e9517d69a4f209.js","sourcesContent":["webpackJsonp([15,32],{\n\n/***/ 319:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n/* styles */\n__webpack_require__(686)\n\nvar Component = __webpack_require__(1)(\n  /* script */\n  __webpack_require__(591),\n  /* template */\n  __webpack_require__(762),\n  /* scopeId */\n  \"data-v-6542018a\",\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n\n/***/ 492:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.pickerOptions = undefined;\n\nvar _keys = __webpack_require__(61);\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _typeof2 = __webpack_require__(33);\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nexports.parseTime = parseTime;\nexports.formatTime = formatTime;\nexports.getQueryObject = getQueryObject;\nexports.getByteLen = getByteLen;\nexports.cleanArray = cleanArray;\nexports.param = param;\nexports.html2Text = html2Text;\nexports.objectMerge = objectMerge;\nexports.scrollTo = scrollTo;\nexports.toggleClass = toggleClass;\nexports.getTime = getTime;\nexports.showdownMD = showdownMD;\n\nvar _showdown = __webpack_require__(524);\n\nvar _showdown2 = _interopRequireDefault(_showdown);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar converter = new _showdown2.default.Converter();\n\nfunction parseTime(time, cFormat) {\n  if (arguments.length === 0) {\n    return null;\n  }\n  var format = cFormat || '{y}-{m}-{d} {h}:{i}:{s}';\n  var date = void 0;\n  if ((typeof time === 'undefined' ? 'undefined' : (0, _typeof3.default)(time)) == 'object') {\n    date = time;\n  } else {\n    if (('' + time).length === 10) time = parseInt(time) * 1000;\n    date = new Date(time);\n  }\n  var formatObj = {\n    y: date.getFullYear(),\n    m: date.getMonth() + 1,\n    d: date.getDate(),\n    h: date.getHours(),\n    i: date.getMinutes(),\n    s: date.getSeconds(),\n    a: date.getDay()\n  };\n  var time_str = format.replace(/{(y|m|d|h|i|s|a)+}/g, function (result, key) {\n    var value = formatObj[key];\n    if (key === 'a') return ['一', '二', '三', '四', '五', '六', '日'][value - 1];\n    if (result.length > 0 && value < 10) {\n      value = '0' + value;\n    }\n    return value || 0;\n  });\n  return time_str;\n}\n\nfunction formatTime(time, option) {\n  time = +time * 1000;\n  var d = new Date(time);\n  var now = Date.now();\n\n  var diff = (now - d) / 1000;\n\n  if (diff < 30) {\n    return '刚刚';\n  } else if (diff < 3600) {\n    return Math.ceil(diff / 60) + '分钟前';\n  } else if (diff < 3600 * 24) {\n    return Math.ceil(diff / 3600) + '小时前';\n  } else if (diff < 3600 * 24 * 2) {\n    return '1天前';\n  }\n  if (option) {\n    return parseTime(time, option);\n  } else {\n    return d.getMonth() + 1 + '月' + d.getDate() + '日' + d.getHours() + '时' + d.getMinutes() + '分';\n  }\n}\n\nfunction getQueryObject(url) {\n  url = url == null ? window.location.href : url;\n  var search = url.substring(url.lastIndexOf('?') + 1);\n  var obj = {};\n  var reg = /([^?&=]+)=([^?&=]*)/g;\n  search.replace(reg, function (rs, $1, $2) {\n    var name = decodeURIComponent($1);\n    var val = decodeURIComponent($2);\n    val = String(val);\n    obj[name] = val;\n    return rs;\n  });\n  return obj;\n}\n\nfunction getByteLen(val) {\n  var len = 0;\n  for (var i = 0; i < val.length; i++) {\n    if (val[i].match(/[^\\x00-\\xff]/ig) != null) {\n      len += 1;\n    } else {\n      len += 0.5;\n    }\n  }\n  return Math.floor(len);\n}\n\nfunction cleanArray(actual) {\n  var newArray = [];\n  for (var i = 0; i < actual.length; i++) {\n    if (actual[i]) {\n      newArray.push(actual[i]);\n    }\n  }\n  return newArray;\n}\n\nfunction param(json) {\n  if (!json) return '';\n  return cleanArray((0, _keys2.default)(json).map(function (key) {\n    if (json[key] === undefined) return '';\n    return encodeURIComponent(key) + '=' + encodeURIComponent(json[key]);\n  })).join('&');\n}\n\nfunction html2Text(val) {\n  var div = document.createElement('div');\n  div.innerHTML = val;\n  return div.textContent || div.innerText;\n}\n\nfunction objectMerge(target, source) {\n\n  if ((typeof target === 'undefined' ? 'undefined' : (0, _typeof3.default)(target)) !== 'object') {\n    target = {};\n  }\n  if (Array.isArray(source)) {\n    return source.slice();\n  }\n  for (var property in source) {\n    if (source.hasOwnProperty(property)) {\n      var sourceProperty = source[property];\n      if ((typeof sourceProperty === 'undefined' ? 'undefined' : (0, _typeof3.default)(sourceProperty)) === 'object') {\n        target[property] = objectMerge(target[property], sourceProperty);\n        continue;\n      }\n      target[property] = sourceProperty;\n    }\n  }\n  return target;\n}\n\nfunction scrollTo(element, to, duration) {\n  if (duration <= 0) return;\n  var difference = to - element.scrollTop;\n  var perTick = difference / duration * 10;\n  setTimeout(function () {\n    console.log(new Date());\n    element.scrollTop = element.scrollTop + perTick;\n    if (element.scrollTop === to) return;\n    scrollTo(element, to, duration - 10);\n  }, 10);\n}\n\nfunction toggleClass(element, className) {\n  if (!element || !className) {\n    return;\n  }\n  var classString = element.className;\n  var nameIndex = classString.indexOf(className);\n  if (nameIndex === -1) {\n    classString += '' + className;\n  } else {\n    classString = classString.substr(0, nameIndex) + classString.substr(nameIndex + className.length);\n  }\n  element.className = classString;\n}\n\nvar pickerOptions = exports.pickerOptions = [{\n  text: '今天',\n  onClick: function onClick(picker) {\n    var end = new Date();\n    var start = new Date(new Date().toDateString());\n    end.setTime(start.getTime());\n    picker.$emit('pick', [start, end]);\n  }\n}, {\n  text: '最近一周',\n  onClick: function onClick(picker) {\n    var end = new Date(new Date().toDateString());\n    var start = new Date();\n    start.setTime(end.getTime() - 3600 * 1000 * 24 * 7);\n    picker.$emit('pick', [start, end]);\n  }\n}, {\n  text: '最近一个月',\n  onClick: function onClick(picker) {\n    var end = new Date(new Date().toDateString());\n    var start = new Date();\n    start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);\n    picker.$emit('pick', [start, end]);\n  }\n}, {\n  text: '最近三个月',\n  onClick: function onClick(picker) {\n    var end = new Date(new Date().toDateString());\n    var start = new Date();\n    start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);\n    picker.$emit('pick', [start, end]);\n  }\n}];\n\nfunction getTime(type) {\n  if (type === 'start') {\n    return new Date().getTime() - 3600 * 1000 * 24 * 90;\n  } else {\n    return new Date(new Date().toDateString());\n  }\n}\n\nfunction showdownMD(md) {\n  return converter.makeHtml(md);\n}\n\n/***/ }),\n\n/***/ 524:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_RESULT__;;/*! showdown 06-02-2017 */\r\n(function(){\r\n/**\n * Created by Tivie on 13-07-2015.\n */\n\nfunction getDefaultOpts (simple) {\n  'use strict';\n\n  var defaultOptions = {\n    omitExtraWLInCodeBlocks: {\n      defaultValue: false,\n      describe: 'Omit the default extra whiteline added to code blocks',\n      type: 'boolean'\n    },\n    noHeaderId: {\n      defaultValue: false,\n      describe: 'Turn on/off generated header id',\n      type: 'boolean'\n    },\n    prefixHeaderId: {\n      defaultValue: false,\n      describe: 'Specify a prefix to generated header ids',\n      type: 'string'\n    },\n    ghCompatibleHeaderId: {\n      defaultValue: false,\n      describe: 'Generate header ids compatible with github style (spaces are replaced with dashes, a bunch of non alphanumeric chars are removed)',\n      type: 'boolean'\n    },\n    headerLevelStart: {\n      defaultValue: false,\n      describe: 'The header blocks level start',\n      type: 'integer'\n    },\n    parseImgDimensions: {\n      defaultValue: false,\n      describe: 'Turn on/off image dimension parsing',\n      type: 'boolean'\n    },\n    simplifiedAutoLink: {\n      defaultValue: false,\n      describe: 'Turn on/off GFM autolink style',\n      type: 'boolean'\n    },\n    excludeTrailingPunctuationFromURLs: {\n      defaultValue: false,\n      describe: 'Excludes trailing punctuation from links generated with autoLinking',\n      type: 'boolean'\n    },\n    literalMidWordUnderscores: {\n      defaultValue: false,\n      describe: 'Parse midword underscores as literal underscores',\n      type: 'boolean'\n    },\n    strikethrough: {\n      defaultValue: false,\n      describe: 'Turn on/off strikethrough support',\n      type: 'boolean'\n    },\n    tables: {\n      defaultValue: false,\n      describe: 'Turn on/off tables support',\n      type: 'boolean'\n    },\n    tablesHeaderId: {\n      defaultValue: false,\n      describe: 'Add an id to table headers',\n      type: 'boolean'\n    },\n    ghCodeBlocks: {\n      defaultValue: true,\n      describe: 'Turn on/off GFM fenced code blocks support',\n      type: 'boolean'\n    },\n    tasklists: {\n      defaultValue: false,\n      describe: 'Turn on/off GFM tasklist support',\n      type: 'boolean'\n    },\n    smoothLivePreview: {\n      defaultValue: false,\n      describe: 'Prevents weird effects in live previews due to incomplete input',\n      type: 'boolean'\n    },\n    smartIndentationFix: {\n      defaultValue: false,\n      description: 'Tries to smartly fix indentation in es6 strings',\n      type: 'boolean'\n    },\n    disableForced4SpacesIndentedSublists: {\n      defaultValue: false,\n      description: 'Disables the requirement of indenting nested sublists by 4 spaces',\n      type: 'boolean'\n    },\n    simpleLineBreaks: {\n      defaultValue: false,\n      description: 'Parses simple line breaks as <br> (GFM Style)',\n      type: 'boolean'\n    },\n    requireSpaceBeforeHeadingText: {\n      defaultValue: false,\n      description: 'Makes adding a space between `#` and the header text mandatory (GFM Style)',\n      type: 'boolean'\n    },\n    ghMentions: {\n      defaultValue: false,\n      description: 'Enables github @mentions',\n      type: 'boolean'\n    },\n    ghMentionsLink: {\n      defaultValue: 'https://github.com/{u}',\n      description: 'Changes the link generated by @mentions. Only applies if ghMentions option is enabled.',\n      type: 'string'\n    },\n    encodeEmails: {\n      defaultValue: true,\n      description: 'Encode e-mail addresses through the use of Character Entities, transforming ASCII e-mail addresses into its equivalent decimal entities',\n      type: 'boolean'\n    }\n  };\n  if (simple === false) {\n    return JSON.parse(JSON.stringify(defaultOptions));\n  }\n  var ret = {};\n  for (var opt in defaultOptions) {\n    if (defaultOptions.hasOwnProperty(opt)) {\n      ret[opt] = defaultOptions[opt].defaultValue;\n    }\n  }\n  return ret;\n}\n\nfunction allOptionsOn () {\n  'use strict';\n  var options = getDefaultOpts(true),\n      ret = {};\n  for (var opt in options) {\n    if (options.hasOwnProperty(opt)) {\n      ret[opt] = true;\n    }\n  }\n  return ret;\n}\n\r\n/**\n * Created by Tivie on 06-01-2015.\n */\n\n// Private properties\nvar showdown = {},\n    parsers = {},\n    extensions = {},\n    globalOptions = getDefaultOpts(true),\n    setFlavor = 'vanilla',\n    flavor = {\n      github: {\n        omitExtraWLInCodeBlocks:              true,\n        simplifiedAutoLink:                   true,\n        excludeTrailingPunctuationFromURLs:   true,\n        literalMidWordUnderscores:            true,\n        strikethrough:                        true,\n        tables:                               true,\n        tablesHeaderId:                       true,\n        ghCodeBlocks:                         true,\n        tasklists:                            true,\n        disableForced4SpacesIndentedSublists: true,\n        simpleLineBreaks:                     true,\n        requireSpaceBeforeHeadingText:        true,\n        ghCompatibleHeaderId:                 true,\n        ghMentions:                           true\n      },\n      original: {\n        noHeaderId:                           true,\n        ghCodeBlocks:                         false\n      },\n      ghost: {\n        omitExtraWLInCodeBlocks:              true,\n        parseImgDimensions:                   true,\n        simplifiedAutoLink:                   true,\n        excludeTrailingPunctuationFromURLs:   true,\n        literalMidWordUnderscores:            true,\n        strikethrough:                        true,\n        tables:                               true,\n        tablesHeaderId:                       true,\n        ghCodeBlocks:                         true,\n        tasklists:                            true,\n        smoothLivePreview:                    true,\n        simpleLineBreaks:                     true,\n        requireSpaceBeforeHeadingText:        true,\n        ghMentions:                           false,\n        encodeEmails:                         true\n      },\n      vanilla: getDefaultOpts(true),\n      allOn: allOptionsOn()\n    };\n\n/**\n * helper namespace\n * @type {{}}\n */\nshowdown.helper = {};\n\n/**\n * TODO LEGACY SUPPORT CODE\n * @type {{}}\n */\nshowdown.extensions = {};\n\n/**\n * Set a global option\n * @static\n * @param {string} key\n * @param {*} value\n * @returns {showdown}\n */\nshowdown.setOption = function (key, value) {\n  'use strict';\n  globalOptions[key] = value;\n  return this;\n};\n\n/**\n * Get a global option\n * @static\n * @param {string} key\n * @returns {*}\n */\nshowdown.getOption = function (key) {\n  'use strict';\n  return globalOptions[key];\n};\n\n/**\n * Get the global options\n * @static\n * @returns {{}}\n */\nshowdown.getOptions = function () {\n  'use strict';\n  return globalOptions;\n};\n\n/**\n * Reset global options to the default values\n * @static\n */\nshowdown.resetOptions = function () {\n  'use strict';\n  globalOptions = getDefaultOpts(true);\n};\n\n/**\n * Set the flavor showdown should use as default\n * @param {string} name\n */\nshowdown.setFlavor = function (name) {\n  'use strict';\n  if (!flavor.hasOwnProperty(name)) {\n    throw Error(name + ' flavor was not found');\n  }\n  var preset = flavor[name];\n  setFlavor = name;\n  for (var option in preset) {\n    if (preset.hasOwnProperty(option)) {\n      globalOptions[option] = preset[option];\n    }\n  }\n};\n\n/**\n * Get the currently set flavor\n * @returns {string}\n */\nshowdown.getFlavor = function () {\n  'use strict';\n  return setFlavor;\n};\n\n/**\n * Get the options of a specified flavor. Returns undefined if the flavor was not found\n * @param {string} name Name of the flavor\n * @returns {{}|undefined}\n */\nshowdown.getFlavorOptions = function (name) {\n  'use strict';\n  if (flavor.hasOwnProperty(name)) {\n    return flavor[name];\n  }\n};\n\n/**\n * Get the default options\n * @static\n * @param {boolean} [simple=true]\n * @returns {{}}\n */\nshowdown.getDefaultOptions = function (simple) {\n  'use strict';\n  return getDefaultOpts(simple);\n};\n\n/**\n * Get or set a subParser\n *\n * subParser(name)       - Get a registered subParser\n * subParser(name, func) - Register a subParser\n * @static\n * @param {string} name\n * @param {function} [func]\n * @returns {*}\n */\nshowdown.subParser = function (name, func) {\n  'use strict';\n  if (showdown.helper.isString(name)) {\n    if (typeof func !== 'undefined') {\n      parsers[name] = func;\n    } else {\n      if (parsers.hasOwnProperty(name)) {\n        return parsers[name];\n      } else {\n        throw Error('SubParser named ' + name + ' not registered!');\n      }\n    }\n  }\n};\n\n/**\n * Gets or registers an extension\n * @static\n * @param {string} name\n * @param {object|function=} ext\n * @returns {*}\n */\nshowdown.extension = function (name, ext) {\n  'use strict';\n\n  if (!showdown.helper.isString(name)) {\n    throw Error('Extension \\'name\\' must be a string');\n  }\n\n  name = showdown.helper.stdExtName(name);\n\n  // Getter\n  if (showdown.helper.isUndefined(ext)) {\n    if (!extensions.hasOwnProperty(name)) {\n      throw Error('Extension named ' + name + ' is not registered!');\n    }\n    return extensions[name];\n\n    // Setter\n  } else {\n    // Expand extension if it's wrapped in a function\n    if (typeof ext === 'function') {\n      ext = ext();\n    }\n\n    // Ensure extension is an array\n    if (!showdown.helper.isArray(ext)) {\n      ext = [ext];\n    }\n\n    var validExtension = validate(ext, name);\n\n    if (validExtension.valid) {\n      extensions[name] = ext;\n    } else {\n      throw Error(validExtension.error);\n    }\n  }\n};\n\n/**\n * Gets all extensions registered\n * @returns {{}}\n */\nshowdown.getAllExtensions = function () {\n  'use strict';\n  return extensions;\n};\n\n/**\n * Remove an extension\n * @param {string} name\n */\nshowdown.removeExtension = function (name) {\n  'use strict';\n  delete extensions[name];\n};\n\n/**\n * Removes all extensions\n */\nshowdown.resetExtensions = function () {\n  'use strict';\n  extensions = {};\n};\n\n/**\n * Validate extension\n * @param {array} extension\n * @param {string} name\n * @returns {{valid: boolean, error: string}}\n */\nfunction validate (extension, name) {\n  'use strict';\n\n  var errMsg = (name) ? 'Error in ' + name + ' extension->' : 'Error in unnamed extension',\n      ret = {\n        valid: true,\n        error: ''\n      };\n\n  if (!showdown.helper.isArray(extension)) {\n    extension = [extension];\n  }\n\n  for (var i = 0; i < extension.length; ++i) {\n    var baseMsg = errMsg + ' sub-extension ' + i + ': ',\n        ext = extension[i];\n    if (typeof ext !== 'object') {\n      ret.valid = false;\n      ret.error = baseMsg + 'must be an object, but ' + typeof ext + ' given';\n      return ret;\n    }\n\n    if (!showdown.helper.isString(ext.type)) {\n      ret.valid = false;\n      ret.error = baseMsg + 'property \"type\" must be a string, but ' + typeof ext.type + ' given';\n      return ret;\n    }\n\n    var type = ext.type = ext.type.toLowerCase();\n\n    // normalize extension type\n    if (type === 'language') {\n      type = ext.type = 'lang';\n    }\n\n    if (type === 'html') {\n      type = ext.type = 'output';\n    }\n\n    if (type !== 'lang' && type !== 'output' && type !== 'listener') {\n      ret.valid = false;\n      ret.error = baseMsg + 'type ' + type + ' is not recognized. Valid values: \"lang/language\", \"output/html\" or \"listener\"';\n      return ret;\n    }\n\n    if (type === 'listener') {\n      if (showdown.helper.isUndefined(ext.listeners)) {\n        ret.valid = false;\n        ret.error = baseMsg + '. Extensions of type \"listener\" must have a property called \"listeners\"';\n        return ret;\n      }\n    } else {\n      if (showdown.helper.isUndefined(ext.filter) && showdown.helper.isUndefined(ext.regex)) {\n        ret.valid = false;\n        ret.error = baseMsg + type + ' extensions must define either a \"regex\" property or a \"filter\" method';\n        return ret;\n      }\n    }\n\n    if (ext.listeners) {\n      if (typeof ext.listeners !== 'object') {\n        ret.valid = false;\n        ret.error = baseMsg + '\"listeners\" property must be an object but ' + typeof ext.listeners + ' given';\n        return ret;\n      }\n      for (var ln in ext.listeners) {\n        if (ext.listeners.hasOwnProperty(ln)) {\n          if (typeof ext.listeners[ln] !== 'function') {\n            ret.valid = false;\n            ret.error = baseMsg + '\"listeners\" property must be an hash of [event name]: [callback]. listeners.' + ln +\n              ' must be a function but ' + typeof ext.listeners[ln] + ' given';\n            return ret;\n          }\n        }\n      }\n    }\n\n    if (ext.filter) {\n      if (typeof ext.filter !== 'function') {\n        ret.valid = false;\n        ret.error = baseMsg + '\"filter\" must be a function, but ' + typeof ext.filter + ' given';\n        return ret;\n      }\n    } else if (ext.regex) {\n      if (showdown.helper.isString(ext.regex)) {\n        ext.regex = new RegExp(ext.regex, 'g');\n      }\n      if (!(ext.regex instanceof RegExp)) {\n        ret.valid = false;\n        ret.error = baseMsg + '\"regex\" property must either be a string or a RegExp object, but ' + typeof ext.regex + ' given';\n        return ret;\n      }\n      if (showdown.helper.isUndefined(ext.replace)) {\n        ret.valid = false;\n        ret.error = baseMsg + '\"regex\" extensions must implement a replace string or function';\n        return ret;\n      }\n    }\n  }\n  return ret;\n}\n\n/**\n * Validate extension\n * @param {object} ext\n * @returns {boolean}\n */\nshowdown.validateExtension = function (ext) {\n  'use strict';\n\n  var validateExtension = validate(ext, null);\n  if (!validateExtension.valid) {\n    console.warn(validateExtension.error);\n    return false;\n  }\n  return true;\n};\n\r\n/**\n * showdownjs helper functions\n */\n\nif (!showdown.hasOwnProperty('helper')) {\n  showdown.helper = {};\n}\n\n/**\n * Check if var is string\n * @static\n * @param {string} a\n * @returns {boolean}\n */\nshowdown.helper.isString = function (a) {\n  'use strict';\n  return (typeof a === 'string' || a instanceof String);\n};\n\n/**\n * Check if var is a function\n * @static\n * @param {*} a\n * @returns {boolean}\n */\nshowdown.helper.isFunction = function (a) {\n  'use strict';\n  var getType = {};\n  return a && getType.toString.call(a) === '[object Function]';\n};\n\n/**\n * isArray helper function\n * @static\n * @param {*} a\n * @returns {boolean}\n */\nshowdown.helper.isArray = function (a) {\n  'use strict';\n  return a.constructor === Array;\n};\n\n/**\n * Check if value is undefined\n * @static\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n */\nshowdown.helper.isUndefined = function (value) {\n  'use strict';\n  return typeof value === 'undefined';\n};\n\n/**\n * ForEach helper function\n * Iterates over Arrays and Objects (own properties only)\n * @static\n * @param {*} obj\n * @param {function} callback Accepts 3 params: 1. value, 2. key, 3. the original array/object\n */\nshowdown.helper.forEach = function (obj, callback) {\n  'use strict';\n  // check if obj is defined\n  if (showdown.helper.isUndefined(obj)) {\n    throw new Error('obj param is required');\n  }\n\n  if (showdown.helper.isUndefined(callback)) {\n    throw new Error('callback param is required');\n  }\n\n  if (!showdown.helper.isFunction(callback)) {\n    throw new Error('callback param must be a function/closure');\n  }\n\n  if (typeof obj.forEach === 'function') {\n    obj.forEach(callback);\n  } else if (showdown.helper.isArray(obj)) {\n    for (var i = 0; i < obj.length; i++) {\n      callback(obj[i], i, obj);\n    }\n  } else if (typeof (obj) === 'object') {\n    for (var prop in obj) {\n      if (obj.hasOwnProperty(prop)) {\n        callback(obj[prop], prop, obj);\n      }\n    }\n  } else {\n    throw new Error('obj does not seem to be an array or an iterable object');\n  }\n};\n\n/**\n * Standardidize extension name\n * @static\n * @param {string} s extension name\n * @returns {string}\n */\nshowdown.helper.stdExtName = function (s) {\n  'use strict';\n  return s.replace(/[_?*+\\/\\\\.^-]/g, '').replace(/\\s/g, '').toLowerCase();\n};\n\nfunction escapeCharactersCallback (wholeMatch, m1) {\n  'use strict';\n  var charCodeToEscape = m1.charCodeAt(0);\n  return '¨E' + charCodeToEscape + 'E';\n}\n\n/**\n * Callback used to escape characters when passing through String.replace\n * @static\n * @param {string} wholeMatch\n * @param {string} m1\n * @returns {string}\n */\nshowdown.helper.escapeCharactersCallback = escapeCharactersCallback;\n\n/**\n * Escape characters in a string\n * @static\n * @param {string} text\n * @param {string} charsToEscape\n * @param {boolean} afterBackslash\n * @returns {XML|string|void|*}\n */\nshowdown.helper.escapeCharacters = function (text, charsToEscape, afterBackslash) {\n  'use strict';\n  // First we have to escape the escape characters so that\n  // we can build a character class out of them\n  var regexString = '([' + charsToEscape.replace(/([\\[\\]\\\\])/g, '\\\\$1') + '])';\n\n  if (afterBackslash) {\n    regexString = '\\\\\\\\' + regexString;\n  }\n\n  var regex = new RegExp(regexString, 'g');\n  text = text.replace(regex, escapeCharactersCallback);\n\n  return text;\n};\n\nvar rgxFindMatchPos = function (str, left, right, flags) {\n  'use strict';\n  var f = flags || '',\n      g = f.indexOf('g') > -1,\n      x = new RegExp(left + '|' + right, 'g' + f.replace(/g/g, '')),\n      l = new RegExp(left, f.replace(/g/g, '')),\n      pos = [],\n      t, s, m, start, end;\n\n  do {\n    t = 0;\n    while ((m = x.exec(str))) {\n      if (l.test(m[0])) {\n        if (!(t++)) {\n          s = x.lastIndex;\n          start = s - m[0].length;\n        }\n      } else if (t) {\n        if (!--t) {\n          end = m.index + m[0].length;\n          var obj = {\n            left: {start: start, end: s},\n            match: {start: s, end: m.index},\n            right: {start: m.index, end: end},\n            wholeMatch: {start: start, end: end}\n          };\n          pos.push(obj);\n          if (!g) {\n            return pos;\n          }\n        }\n      }\n    }\n  } while (t && (x.lastIndex = s));\n\n  return pos;\n};\n\n/**\n * matchRecursiveRegExp\n *\n * (c) 2007 Steven Levithan <stevenlevithan.com>\n * MIT License\n *\n * Accepts a string to search, a left and right format delimiter\n * as regex patterns, and optional regex flags. Returns an array\n * of matches, allowing nested instances of left/right delimiters.\n * Use the \"g\" flag to return all matches, otherwise only the\n * first is returned. Be careful to ensure that the left and\n * right format delimiters produce mutually exclusive matches.\n * Backreferences are not supported within the right delimiter\n * due to how it is internally combined with the left delimiter.\n * When matching strings whose format delimiters are unbalanced\n * to the left or right, the output is intentionally as a\n * conventional regex library with recursion support would\n * produce, e.g. \"<<x>\" and \"<x>>\" both produce [\"x\"] when using\n * \"<\" and \">\" as the delimiters (both strings contain a single,\n * balanced instance of \"<x>\").\n *\n * examples:\n * matchRecursiveRegExp(\"test\", \"\\\\(\", \"\\\\)\")\n * returns: []\n * matchRecursiveRegExp(\"<t<<e>><s>>t<>\", \"<\", \">\", \"g\")\n * returns: [\"t<<e>><s>\", \"\"]\n * matchRecursiveRegExp(\"<div id=\\\"x\\\">test</div>\", \"<div\\\\b[^>]*>\", \"</div>\", \"gi\")\n * returns: [\"test\"]\n */\nshowdown.helper.matchRecursiveRegExp = function (str, left, right, flags) {\n  'use strict';\n\n  var matchPos = rgxFindMatchPos (str, left, right, flags),\n      results = [];\n\n  for (var i = 0; i < matchPos.length; ++i) {\n    results.push([\n      str.slice(matchPos[i].wholeMatch.start, matchPos[i].wholeMatch.end),\n      str.slice(matchPos[i].match.start, matchPos[i].match.end),\n      str.slice(matchPos[i].left.start, matchPos[i].left.end),\n      str.slice(matchPos[i].right.start, matchPos[i].right.end)\n    ]);\n  }\n  return results;\n};\n\n/**\n *\n * @param {string} str\n * @param {string|function} replacement\n * @param {string} left\n * @param {string} right\n * @param {string} flags\n * @returns {string}\n */\nshowdown.helper.replaceRecursiveRegExp = function (str, replacement, left, right, flags) {\n  'use strict';\n\n  if (!showdown.helper.isFunction(replacement)) {\n    var repStr = replacement;\n    replacement = function () {\n      return repStr;\n    };\n  }\n\n  var matchPos = rgxFindMatchPos(str, left, right, flags),\n      finalStr = str,\n      lng = matchPos.length;\n\n  if (lng > 0) {\n    var bits = [];\n    if (matchPos[0].wholeMatch.start !== 0) {\n      bits.push(str.slice(0, matchPos[0].wholeMatch.start));\n    }\n    for (var i = 0; i < lng; ++i) {\n      bits.push(\n        replacement(\n          str.slice(matchPos[i].wholeMatch.start, matchPos[i].wholeMatch.end),\n          str.slice(matchPos[i].match.start, matchPos[i].match.end),\n          str.slice(matchPos[i].left.start, matchPos[i].left.end),\n          str.slice(matchPos[i].right.start, matchPos[i].right.end)\n        )\n      );\n      if (i < lng - 1) {\n        bits.push(str.slice(matchPos[i].wholeMatch.end, matchPos[i + 1].wholeMatch.start));\n      }\n    }\n    if (matchPos[lng - 1].wholeMatch.end < str.length) {\n      bits.push(str.slice(matchPos[lng - 1].wholeMatch.end));\n    }\n    finalStr = bits.join('');\n  }\n  return finalStr;\n};\n\n/**\n * Obfuscate an e-mail address through the use of Character Entities,\n * transforming ASCII characters into their equivalent decimal or hex entities.\n *\n * Since it has a random component, subsequent calls to this function produce different results\n *\n * @param {string} mail\n * @returns {string}\n */\nshowdown.helper.encodeEmailAddress = function (mail) {\n  'use strict';\n  var encode = [\n    function (ch) {\n      return '&#' + ch.charCodeAt(0) + ';';\n    },\n    function (ch) {\n      return '&#x' + ch.charCodeAt(0).toString(16) + ';';\n    },\n    function (ch) {\n      return ch;\n    }\n  ];\n\n  mail = mail.replace(/./g, function (ch) {\n    if (ch === '@') {\n      // this *must* be encoded. I insist.\n      ch = encode[Math.floor(Math.random() * 2)](ch);\n    } else {\n      var r = Math.random();\n      // roughly 10% raw, 45% hex, 45% dec\n      ch = (\n        r > 0.9 ? encode[2](ch) : r > 0.45 ? encode[1](ch) : encode[0](ch)\n      );\n    }\n    return ch;\n  });\n\n  return mail;\n};\n\n/**\n * POLYFILLS\n */\n// use this instead of builtin is undefined for IE8 compatibility\nif (typeof(console) === 'undefined') {\n  console = {\n    warn: function (msg) {\n      'use strict';\n      alert(msg);\n    },\n    log: function (msg) {\n      'use strict';\n      alert(msg);\n    },\n    error: function (msg) {\n      'use strict';\n      throw msg;\n    }\n  };\n}\n\n/**\n * Common regexes.\n * We declare some common regexes to improve performance\n */\nshowdown.helper.regexes = {\n  asteriskAndDash: /([*_])/g\n};\n\r\n/**\n * Created by Estevao on 31-05-2015.\n */\n\n/**\n * Showdown Converter class\n * @class\n * @param {object} [converterOptions]\n * @returns {Converter}\n */\nshowdown.Converter = function (converterOptions) {\n  'use strict';\n\n  var\n      /**\n       * Options used by this converter\n       * @private\n       * @type {{}}\n       */\n      options = {},\n\n      /**\n       * Language extensions used by this converter\n       * @private\n       * @type {Array}\n       */\n      langExtensions = [],\n\n      /**\n       * Output modifiers extensions used by this converter\n       * @private\n       * @type {Array}\n       */\n      outputModifiers = [],\n\n      /**\n       * Event listeners\n       * @private\n       * @type {{}}\n       */\n      listeners = {},\n\n      /**\n       * The flavor set in this converter\n       */\n      setConvFlavor = setFlavor;\n\n  _constructor();\n\n  /**\n   * Converter constructor\n   * @private\n   */\n  function _constructor () {\n    converterOptions = converterOptions || {};\n\n    for (var gOpt in globalOptions) {\n      if (globalOptions.hasOwnProperty(gOpt)) {\n        options[gOpt] = globalOptions[gOpt];\n      }\n    }\n\n    // Merge options\n    if (typeof converterOptions === 'object') {\n      for (var opt in converterOptions) {\n        if (converterOptions.hasOwnProperty(opt)) {\n          options[opt] = converterOptions[opt];\n        }\n      }\n    } else {\n      throw Error('Converter expects the passed parameter to be an object, but ' + typeof converterOptions +\n      ' was passed instead.');\n    }\n\n    if (options.extensions) {\n      showdown.helper.forEach(options.extensions, _parseExtension);\n    }\n  }\n\n  /**\n   * Parse extension\n   * @param {*} ext\n   * @param {string} [name='']\n   * @private\n   */\n  function _parseExtension (ext, name) {\n\n    name = name || null;\n    // If it's a string, the extension was previously loaded\n    if (showdown.helper.isString(ext)) {\n      ext = showdown.helper.stdExtName(ext);\n      name = ext;\n\n      // LEGACY_SUPPORT CODE\n      if (showdown.extensions[ext]) {\n        console.warn('DEPRECATION WARNING: ' + ext + ' is an old extension that uses a deprecated loading method.' +\n          'Please inform the developer that the extension should be updated!');\n        legacyExtensionLoading(showdown.extensions[ext], ext);\n        return;\n      // END LEGACY SUPPORT CODE\n\n      } else if (!showdown.helper.isUndefined(extensions[ext])) {\n        ext = extensions[ext];\n\n      } else {\n        throw Error('Extension \"' + ext + '\" could not be loaded. It was either not found or is not a valid extension.');\n      }\n    }\n\n    if (typeof ext === 'function') {\n      ext = ext();\n    }\n\n    if (!showdown.helper.isArray(ext)) {\n      ext = [ext];\n    }\n\n    var validExt = validate(ext, name);\n    if (!validExt.valid) {\n      throw Error(validExt.error);\n    }\n\n    for (var i = 0; i < ext.length; ++i) {\n      switch (ext[i].type) {\n\n        case 'lang':\n          langExtensions.push(ext[i]);\n          break;\n\n        case 'output':\n          outputModifiers.push(ext[i]);\n          break;\n      }\n      if (ext[i].hasOwnProperty('listeners')) {\n        for (var ln in ext[i].listeners) {\n          if (ext[i].listeners.hasOwnProperty(ln)) {\n            listen(ln, ext[i].listeners[ln]);\n          }\n        }\n      }\n    }\n\n  }\n\n  /**\n   * LEGACY_SUPPORT\n   * @param {*} ext\n   * @param {string} name\n   */\n  function legacyExtensionLoading (ext, name) {\n    if (typeof ext === 'function') {\n      ext = ext(new showdown.Converter());\n    }\n    if (!showdown.helper.isArray(ext)) {\n      ext = [ext];\n    }\n    var valid = validate(ext, name);\n\n    if (!valid.valid) {\n      throw Error(valid.error);\n    }\n\n    for (var i = 0; i < ext.length; ++i) {\n      switch (ext[i].type) {\n        case 'lang':\n          langExtensions.push(ext[i]);\n          break;\n        case 'output':\n          outputModifiers.push(ext[i]);\n          break;\n        default:// should never reach here\n          throw Error('Extension loader error: Type unrecognized!!!');\n      }\n    }\n  }\n\n  /**\n   * Listen to an event\n   * @param {string} name\n   * @param {function} callback\n   */\n  function listen (name, callback) {\n    if (!showdown.helper.isString(name)) {\n      throw Error('Invalid argument in converter.listen() method: name must be a string, but ' + typeof name + ' given');\n    }\n\n    if (typeof callback !== 'function') {\n      throw Error('Invalid argument in converter.listen() method: callback must be a function, but ' + typeof callback + ' given');\n    }\n\n    if (!listeners.hasOwnProperty(name)) {\n      listeners[name] = [];\n    }\n    listeners[name].push(callback);\n  }\n\n  function rTrimInputText (text) {\n    var rsp = text.match(/^\\s*/)[0].length,\n        rgx = new RegExp('^\\\\s{0,' + rsp + '}', 'gm');\n    return text.replace(rgx, '');\n  }\n\n  /**\n   * Dispatch an event\n   * @private\n   * @param {string} evtName Event name\n   * @param {string} text Text\n   * @param {{}} options Converter Options\n   * @param {{}} globals\n   * @returns {string}\n   */\n  this._dispatch = function dispatch (evtName, text, options, globals) {\n    if (listeners.hasOwnProperty(evtName)) {\n      for (var ei = 0; ei < listeners[evtName].length; ++ei) {\n        var nText = listeners[evtName][ei](evtName, text, this, options, globals);\n        if (nText && typeof nText !== 'undefined') {\n          text = nText;\n        }\n      }\n    }\n    return text;\n  };\n\n  /**\n   * Listen to an event\n   * @param {string} name\n   * @param {function} callback\n   * @returns {showdown.Converter}\n   */\n  this.listen = function (name, callback) {\n    listen(name, callback);\n    return this;\n  };\n\n  /**\n   * Converts a markdown string into HTML\n   * @param {string} text\n   * @returns {*}\n   */\n  this.makeHtml = function (text) {\n    //check if text is not falsy\n    if (!text) {\n      return text;\n    }\n\n    var globals = {\n      gHtmlBlocks:     [],\n      gHtmlMdBlocks:   [],\n      gHtmlSpans:      [],\n      gUrls:           {},\n      gTitles:         {},\n      gDimensions:     {},\n      gListLevel:      0,\n      hashLinkCounts:  {},\n      langExtensions:  langExtensions,\n      outputModifiers: outputModifiers,\n      converter:       this,\n      ghCodeBlocks:    []\n    };\n\n    // This lets us use ¨ trema as an escape char to avoid md5 hashes\n    // The choice of character is arbitrary; anything that isn't\n    // magic in Markdown will work.\n    text = text.replace(/¨/g, '¨T');\n\n    // Replace $ with ¨D\n    // RegExp interprets $ as a special character\n    // when it's in a replacement string\n    text = text.replace(/\\$/g, '¨D');\n\n    // Standardize line endings\n    text = text.replace(/\\r\\n/g, '\\n'); // DOS to Unix\n    text = text.replace(/\\r/g, '\\n'); // Mac to Unix\n\n    // Stardardize line spaces (nbsp causes trouble in older browsers and some regex flavors)\n    text = text.replace(/\\u00A0/g, ' ');\n\n    if (options.smartIndentationFix) {\n      text = rTrimInputText(text);\n    }\n\n    // Make sure text begins and ends with a couple of newlines:\n    text = '\\n\\n' + text + '\\n\\n';\n\n    // detab\n    text = showdown.subParser('detab')(text, options, globals);\n\n    /**\n     * Strip any lines consisting only of spaces and tabs.\n     * This makes subsequent regexs easier to write, because we can\n     * match consecutive blank lines with /\\n+/ instead of something\n     * contorted like /[ \\t]*\\n+/\n     */\n    text = text.replace(/^[ \\t]+$/mg, '');\n\n    //run languageExtensions\n    showdown.helper.forEach(langExtensions, function (ext) {\n      text = showdown.subParser('runExtension')(ext, text, options, globals);\n    });\n\n    // run the sub parsers\n    text = showdown.subParser('hashPreCodeTags')(text, options, globals);\n    text = showdown.subParser('githubCodeBlocks')(text, options, globals);\n    text = showdown.subParser('hashHTMLBlocks')(text, options, globals);\n    text = showdown.subParser('hashCodeTags')(text, options, globals);\n    text = showdown.subParser('stripLinkDefinitions')(text, options, globals);\n    text = showdown.subParser('blockGamut')(text, options, globals);\n    text = showdown.subParser('unhashHTMLSpans')(text, options, globals);\n    text = showdown.subParser('unescapeSpecialChars')(text, options, globals);\n\n    // attacklab: Restore dollar signs\n    text = text.replace(/¨D/g, '$$');\n\n    // attacklab: Restore tremas\n    text = text.replace(/¨T/g, '¨');\n\n    // Run output modifiers\n    showdown.helper.forEach(outputModifiers, function (ext) {\n      text = showdown.subParser('runExtension')(ext, text, options, globals);\n    });\n\n    return text;\n  };\n\n  /**\n   * Set an option of this Converter instance\n   * @param {string} key\n   * @param {*} value\n   */\n  this.setOption = function (key, value) {\n    options[key] = value;\n  };\n\n  /**\n   * Get the option of this Converter instance\n   * @param {string} key\n   * @returns {*}\n   */\n  this.getOption = function (key) {\n    return options[key];\n  };\n\n  /**\n   * Get the options of this Converter instance\n   * @returns {{}}\n   */\n  this.getOptions = function () {\n    return options;\n  };\n\n  /**\n   * Add extension to THIS converter\n   * @param {{}} extension\n   * @param {string} [name=null]\n   */\n  this.addExtension = function (extension, name) {\n    name = name || null;\n    _parseExtension(extension, name);\n  };\n\n  /**\n   * Use a global registered extension with THIS converter\n   * @param {string} extensionName Name of the previously registered extension\n   */\n  this.useExtension = function (extensionName) {\n    _parseExtension(extensionName);\n  };\n\n  /**\n   * Set the flavor THIS converter should use\n   * @param {string} name\n   */\n  this.setFlavor = function (name) {\n    if (!flavor.hasOwnProperty(name)) {\n      throw Error(name + ' flavor was not found');\n    }\n    var preset = flavor[name];\n    setConvFlavor = name;\n    for (var option in preset) {\n      if (preset.hasOwnProperty(option)) {\n        options[option] = preset[option];\n      }\n    }\n  };\n\n  /**\n   * Get the currently set flavor of this converter\n   * @returns {string}\n   */\n  this.getFlavor = function () {\n    return setConvFlavor;\n  };\n\n  /**\n   * Remove an extension from THIS converter.\n   * Note: This is a costly operation. It's better to initialize a new converter\n   * and specify the extensions you wish to use\n   * @param {Array} extension\n   */\n  this.removeExtension = function (extension) {\n    if (!showdown.helper.isArray(extension)) {\n      extension = [extension];\n    }\n    for (var a = 0; a < extension.length; ++a) {\n      var ext = extension[a];\n      for (var i = 0; i < langExtensions.length; ++i) {\n        if (langExtensions[i] === ext) {\n          langExtensions[i].splice(i, 1);\n        }\n      }\n      for (var ii = 0; ii < outputModifiers.length; ++i) {\n        if (outputModifiers[ii] === ext) {\n          outputModifiers[ii].splice(i, 1);\n        }\n      }\n    }\n  };\n\n  /**\n   * Get all extension of THIS converter\n   * @returns {{language: Array, output: Array}}\n   */\n  this.getAllExtensions = function () {\n    return {\n      language: langExtensions,\n      output: outputModifiers\n    };\n  };\n};\n\r\n/**\n * Turn Markdown link shortcuts into XHTML <a> tags.\n */\nshowdown.subParser('anchors', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('anchors.before', text, options, globals);\n\n  var writeAnchorTag = function (wholeMatch, m1, m2, m3, m4, m5, m6, m7) {\n    if (showdown.helper.isUndefined(m7)) {\n      m7 = '';\n    }\n    wholeMatch = m1;\n    var linkText = m2,\n        linkId = m3.toLowerCase(),\n        url = m4,\n        title = m7;\n\n    if (!url) {\n      if (!linkId) {\n        // lower-case and turn embedded newlines into spaces\n        linkId = linkText.toLowerCase().replace(/ ?\\n/g, ' ');\n      }\n      url = '#' + linkId;\n\n      if (!showdown.helper.isUndefined(globals.gUrls[linkId])) {\n        url = globals.gUrls[linkId];\n        if (!showdown.helper.isUndefined(globals.gTitles[linkId])) {\n          title = globals.gTitles[linkId];\n        }\n      } else {\n        if (wholeMatch.search(/\\(\\s*\\)$/m) > -1) {\n          // Special case for explicit empty url\n          url = '';\n        } else {\n          return wholeMatch;\n        }\n      }\n    }\n\n    //url = showdown.helper.escapeCharacters(url, '*_', false); // replaced line to improve performance\n    url = url.replace(showdown.helper.regexes.asteriskAndDash, showdown.helper.escapeCharactersCallback);\n\n    var result = '<a href=\"' + url + '\"';\n\n    if (title !== '' && title !== null) {\n      title = title.replace(/\"/g, '&quot;');\n      //title = showdown.helper.escapeCharacters(title, '*_', false); // replaced line to improve performance\n      title = title.replace(showdown.helper.regexes.asteriskAndDash, showdown.helper.escapeCharactersCallback);\n      result += ' title=\"' + title + '\"';\n    }\n\n    result += '>' + linkText + '</a>';\n\n    return result;\n  };\n\n  // First, handle reference-style links: [link text] [id]\n  text = text.replace(/(\\[((?:\\[[^\\]]*]|[^\\[\\]])*)][ ]?(?:\\n[ ]*)?\\[(.*?)])()()()()/g, writeAnchorTag);\n\n  // Next, inline-style links: [link text](url \"optional title\")\n  text = text.replace(/(\\[((?:\\[[^\\]]*]|[^\\[\\]])*)]\\([ \\t]*()<?(.*?(?:\\(.*?\\).*?)?)>?[ \\t]*((['\"])(.*?)\\6[ \\t]*)?\\))/g,\n                      writeAnchorTag);\n\n  // handle reference-style shortcuts: [link text]\n  // These must come last in case you've also got [link test][1]\n  // or [link test](/foo)\n  text = text.replace(/(\\[([^\\[\\]]+)])()()()()()/g, writeAnchorTag);\n\n  // Lastly handle GithubMentions if option is enabled\n  if (options.ghMentions) {\n    text = text.replace(/(^|\\s)(\\\\)?(@([a-z\\d\\-]+))(?=[.!?;,[\\]()]|\\s|$)/gmi, function (wm, st, escape, mentions, username) {\n      if (escape === '\\\\') {\n        return st + mentions;\n      }\n\n      //check if options.ghMentionsLink is a string\n      if (!showdown.helper.isString(options.ghMentionsLink)) {\n        throw new Error('ghMentionsLink option must be a string');\n      }\n      var lnk = options.ghMentionsLink.replace(/\\{u}/g, username);\n      return st + '<a href=\"' + lnk + '\">' + mentions + '</a>';\n    });\n  }\n\n  text = globals.converter._dispatch('anchors.after', text, options, globals);\n  return text;\n});\n\r\nshowdown.subParser('autoLinks', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('autoLinks.before', text, options, globals);\n\n  var simpleURLRegex  = /\\b(((https?|ftp|dict):\\/\\/|www\\.)[^'\">\\s]+\\.[^'\">\\s]+)()(?=\\s|$)(?![\"<>])/gi,\n      simpleURLRegex2 = /\\b(((https?|ftp|dict):\\/\\/|www\\.)[^'\">\\s]+\\.[^'\">\\s]+?)([.!?()]?)(?=\\s|$)(?![\"<>])/gi,\n      delimUrlRegex   = /<(((https?|ftp|dict):\\/\\/|www\\.)[^'\">\\s]+)>/gi,\n      simpleMailRegex = /(^|\\s)(?:mailto:)?([A-Za-z0-9!#$%&'*+-/=?^_`{|}~.]+@[-a-z0-9]+(\\.[-a-z0-9]+)*\\.[a-z]+)(?=$|\\s)/gmi,\n      delimMailRegex  = /<()(?:mailto:)?([-.\\w]+@[-a-z0-9]+(\\.[-a-z0-9]+)*\\.[a-z]+)>/gi;\n\n  text = text.replace(delimUrlRegex, replaceLink);\n  text = text.replace(delimMailRegex, replaceMail);\n  // simpleURLRegex  = /\\b(((https?|ftp|dict):\\/\\/|www\\.)[-.+~:?#@!$&'()*,;=[\\]\\w]+)\\b/gi,\n  // Email addresses: <address@domain.foo>\n\n  if (options.simplifiedAutoLink) {\n    if (options.excludeTrailingPunctuationFromURLs) {\n      text = text.replace(simpleURLRegex2, replaceLink);\n    } else {\n      text = text.replace(simpleURLRegex, replaceLink);\n    }\n    text = text.replace(simpleMailRegex, replaceMail);\n  }\n\n  function replaceLink (wm, link, m2, m3, trailingPunctuation) {\n    var lnkTxt = link,\n        append = '';\n    if (/^www\\./i.test(link)) {\n      link = link.replace(/^www\\./i, 'http://www.');\n    }\n    if (options.excludeTrailingPunctuationFromURLs && trailingPunctuation) {\n      append = trailingPunctuation;\n    }\n    return '<a href=\"' + link + '\">' + lnkTxt + '</a>' + append;\n  }\n\n  function replaceMail (wholeMatch, b, mail) {\n    var href = 'mailto:';\n    b = b || '';\n    mail = showdown.subParser('unescapeSpecialChars')(mail, options, globals);\n    if (options.encodeEmails) {\n      href = showdown.helper.encodeEmailAddress(href + mail);\n      mail = showdown.helper.encodeEmailAddress(mail);\n    } else {\n      href = href + mail;\n    }\n    return b + '<a href=\"' + href + '\">' + mail + '</a>';\n  }\n\n  text = globals.converter._dispatch('autoLinks.after', text, options, globals);\n\n  return text;\n});\n\r\n/**\n * These are all the transformations that form block-level\n * tags like paragraphs, headers, and list items.\n */\nshowdown.subParser('blockGamut', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('blockGamut.before', text, options, globals);\n\n  // we parse blockquotes first so that we can have headings and hrs\n  // inside blockquotes\n  text = showdown.subParser('blockQuotes')(text, options, globals);\n  text = showdown.subParser('headers')(text, options, globals);\n\n  // Do Horizontal Rules:\n  text = showdown.subParser('horizontalRule')(text, options, globals);\n\n  text = showdown.subParser('lists')(text, options, globals);\n  text = showdown.subParser('codeBlocks')(text, options, globals);\n  text = showdown.subParser('tables')(text, options, globals);\n\n  // We already ran _HashHTMLBlocks() before, in Markdown(), but that\n  // was to escape raw HTML in the original Markdown source. This time,\n  // we're escaping the markup we've just created, so that we don't wrap\n  // <p> tags around block-level tags.\n  text = showdown.subParser('hashHTMLBlocks')(text, options, globals);\n  text = showdown.subParser('paragraphs')(text, options, globals);\n\n  text = globals.converter._dispatch('blockGamut.after', text, options, globals);\n\n  return text;\n});\n\r\nshowdown.subParser('blockQuotes', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('blockQuotes.before', text, options, globals);\n\n  text = text.replace(/((^ {0,3}>[ \\t]?.+\\n(.+\\n)*\\n*)+)/gm, function (wholeMatch, m1) {\n    var bq = m1;\n\n    // attacklab: hack around Konqueror 3.5.4 bug:\n    // \"----------bug\".replace(/^-/g,\"\") == \"bug\"\n    bq = bq.replace(/^[ \\t]*>[ \\t]?/gm, '¨0'); // trim one level of quoting\n\n    // attacklab: clean up hack\n    bq = bq.replace(/¨0/g, '');\n\n    bq = bq.replace(/^[ \\t]+$/gm, ''); // trim whitespace-only lines\n    bq = showdown.subParser('githubCodeBlocks')(bq, options, globals);\n    bq = showdown.subParser('blockGamut')(bq, options, globals); // recurse\n\n    bq = bq.replace(/(^|\\n)/g, '$1  ');\n    // These leading spaces screw with <pre> content, so we need to fix that:\n    bq = bq.replace(/(\\s*<pre>[^\\r]+?<\\/pre>)/gm, function (wholeMatch, m1) {\n      var pre = m1;\n      // attacklab: hack around Konqueror 3.5.4 bug:\n      pre = pre.replace(/^  /mg, '¨0');\n      pre = pre.replace(/¨0/g, '');\n      return pre;\n    });\n\n    return showdown.subParser('hashBlock')('<blockquote>\\n' + bq + '\\n</blockquote>', options, globals);\n  });\n\n  text = globals.converter._dispatch('blockQuotes.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Process Markdown `<pre><code>` blocks.\n */\nshowdown.subParser('codeBlocks', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('codeBlocks.before', text, options, globals);\n\n  // sentinel workarounds for lack of \\A and \\Z, safari\\khtml bug\n  text += '¨0';\n\n  var pattern = /(?:\\n\\n|^)((?:(?:[ ]{4}|\\t).*\\n+)+)(\\n*[ ]{0,3}[^ \\t\\n]|(?=¨0))/g;\n  text = text.replace(pattern, function (wholeMatch, m1, m2) {\n    var codeblock = m1,\n        nextChar = m2,\n        end = '\\n';\n\n    codeblock = showdown.subParser('outdent')(codeblock, options, globals);\n    codeblock = showdown.subParser('encodeCode')(codeblock, options, globals);\n    codeblock = showdown.subParser('detab')(codeblock, options, globals);\n    codeblock = codeblock.replace(/^\\n+/g, ''); // trim leading newlines\n    codeblock = codeblock.replace(/\\n+$/g, ''); // trim trailing newlines\n\n    if (options.omitExtraWLInCodeBlocks) {\n      end = '';\n    }\n\n    codeblock = '<pre><code>' + codeblock + end + '</code></pre>';\n\n    return showdown.subParser('hashBlock')(codeblock, options, globals) + nextChar;\n  });\n\n  // strip sentinel\n  text = text.replace(/¨0/, '');\n\n  text = globals.converter._dispatch('codeBlocks.after', text, options, globals);\n  return text;\n});\n\r\n/**\n *\n *   *  Backtick quotes are used for <code></code> spans.\n *\n *   *  You can use multiple backticks as the delimiters if you want to\n *     include literal backticks in the code span. So, this input:\n *\n *         Just type ``foo `bar` baz`` at the prompt.\n *\n *       Will translate to:\n *\n *         <p>Just type <code>foo `bar` baz</code> at the prompt.</p>\n *\n *    There's no arbitrary limit to the number of backticks you\n *    can use as delimters. If you need three consecutive backticks\n *    in your code, use four for delimiters, etc.\n *\n *  *  You can use spaces to get literal backticks at the edges:\n *\n *         ... type `` `bar` `` ...\n *\n *       Turns to:\n *\n *         ... type <code>`bar`</code> ...\n */\nshowdown.subParser('codeSpans', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('codeSpans.before', text, options, globals);\n\n  if (typeof(text) === 'undefined') {\n    text = '';\n  }\n  text = text.replace(/(^|[^\\\\])(`+)([^\\r]*?[^`])\\2(?!`)/gm,\n    function (wholeMatch, m1, m2, m3) {\n      var c = m3;\n      c = c.replace(/^([ \\t]*)/g, '');\t// leading whitespace\n      c = c.replace(/[ \\t]*$/g, '');\t// trailing whitespace\n      c = showdown.subParser('encodeCode')(c, options, globals);\n      return m1 + '<code>' + c + '</code>';\n    }\n  );\n\n  text = globals.converter._dispatch('codeSpans.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Convert all tabs to spaces\n */\nshowdown.subParser('detab', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('detab.before', text, options, globals);\n\n  // expand first n-1 tabs\n  text = text.replace(/\\t(?=\\t)/g, '    '); // g_tab_width\n\n  // replace the nth with two sentinels\n  text = text.replace(/\\t/g, '¨A¨B');\n\n  // use the sentinel to anchor our regex so it doesn't explode\n  text = text.replace(/¨B(.+?)¨A/g, function (wholeMatch, m1) {\n    var leadingText = m1,\n        numSpaces = 4 - leadingText.length % 4;  // g_tab_width\n\n    // there *must* be a better way to do this:\n    for (var i = 0; i < numSpaces; i++) {\n      leadingText += ' ';\n    }\n\n    return leadingText;\n  });\n\n  // clean up sentinels\n  text = text.replace(/¨A/g, '    ');  // g_tab_width\n  text = text.replace(/¨B/g, '');\n\n  text = globals.converter._dispatch('detab.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Smart processing for ampersands and angle brackets that need to be encoded.\n */\nshowdown.subParser('encodeAmpsAndAngles', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('encodeAmpsAndAngles.before', text, options, globals);\n\n  // Ampersand-encoding based entirely on Nat Irons's Amputator MT plugin:\n  // http://bumppo.net/projects/amputator/\n  text = text.replace(/&(?!#?[xX]?(?:[0-9a-fA-F]+|\\w+);)/g, '&amp;');\n\n  // Encode naked <'s\n  text = text.replace(/<(?![a-z\\/?$!])/gi, '&lt;');\n\n  // Encode <\n  text = text.replace(/</g, '&lt;');\n\n  // Encode >\n  text = text.replace(/>/g, '&gt;');\n\n  text = globals.converter._dispatch('encodeAmpsAndAngles.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Returns the string, with after processing the following backslash escape sequences.\n *\n * attacklab: The polite way to do this is with the new escapeCharacters() function:\n *\n *    text = escapeCharacters(text,\"\\\\\",true);\n *    text = escapeCharacters(text,\"`*_{}[]()>#+-.!\",true);\n *\n * ...but we're sidestepping its use of the (slow) RegExp constructor\n * as an optimization for Firefox.  This function gets called a LOT.\n */\nshowdown.subParser('encodeBackslashEscapes', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('encodeBackslashEscapes.before', text, options, globals);\n\n  text = text.replace(/\\\\(\\\\)/g, showdown.helper.escapeCharactersCallback);\n  text = text.replace(/\\\\([`*_{}\\[\\]()>#+.!~=-])/g, showdown.helper.escapeCharactersCallback);\n\n  text = globals.converter._dispatch('encodeBackslashEscapes.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Encode/escape certain characters inside Markdown code runs.\n * The point is that in code, these characters are literals,\n * and lose their special Markdown meanings.\n */\nshowdown.subParser('encodeCode', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('encodeCode.before', text, options, globals);\n\n  // Encode all ampersands; HTML entities are not\n  // entities within a Markdown code span.\n  text = text\n    .replace(/&/g, '&amp;')\n  // Do the angle bracket song and dance:\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n  // Now, escape characters that are magic in Markdown:\n    .replace(/([*_{}\\[\\]\\\\=~-])/g, showdown.helper.escapeCharactersCallback);\n\n  text = globals.converter._dispatch('encodeCode.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Within tags -- meaning between < and > -- encode [\\ ` * _ ~ =] so they\n * don't conflict with their use in Markdown for code, italics and strong.\n */\nshowdown.subParser('escapeSpecialCharsWithinTagAttributes', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('escapeSpecialCharsWithinTagAttributes.before', text, options, globals);\n\n  // Build a regex to find HTML tags and comments.  See Friedl's\n  // \"Mastering Regular Expressions\", 2nd Ed., pp. 200-201.\n  var regex = /(<[a-z\\/!$](\"[^\"]*\"|'[^']*'|[^'\">])*>|<!(--.*?--\\s*)+>)/gi;\n\n  text = text.replace(regex, function (wholeMatch) {\n    return wholeMatch\n      .replace(/(.)<\\/?code>(?=.)/g, '$1`')\n      .replace(/([\\\\`*_~=])/g, showdown.helper.escapeCharactersCallback);\n  });\n\n  text = globals.converter._dispatch('escapeSpecialCharsWithinTagAttributes.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Handle github codeblocks prior to running HashHTML so that\n * HTML contained within the codeblock gets escaped properly\n * Example:\n * ```ruby\n *     def hello_world(x)\n *       puts \"Hello, #{x}\"\n *     end\n * ```\n */\nshowdown.subParser('githubCodeBlocks', function (text, options, globals) {\n  'use strict';\n\n  // early exit if option is not enabled\n  if (!options.ghCodeBlocks) {\n    return text;\n  }\n\n  text = globals.converter._dispatch('githubCodeBlocks.before', text, options, globals);\n\n  text += '¨0';\n\n  text = text.replace(/(?:^|\\n)```(.*)\\n([\\s\\S]*?)\\n```/g, function (wholeMatch, language, codeblock) {\n    var end = (options.omitExtraWLInCodeBlocks) ? '' : '\\n';\n\n    // First parse the github code block\n    codeblock = showdown.subParser('encodeCode')(codeblock, options, globals);\n    codeblock = showdown.subParser('detab')(codeblock, options, globals);\n    codeblock = codeblock.replace(/^\\n+/g, ''); // trim leading newlines\n    codeblock = codeblock.replace(/\\n+$/g, ''); // trim trailing whitespace\n\n    codeblock = '<pre><code' + (language ? ' class=\"' + language + ' language-' + language + '\"' : '') + '>' + codeblock + end + '</code></pre>';\n\n    codeblock = showdown.subParser('hashBlock')(codeblock, options, globals);\n\n    // Since GHCodeblocks can be false positives, we need to\n    // store the primitive text and the parsed text in a global var,\n    // and then return a token\n    return '\\n\\n¨G' + (globals.ghCodeBlocks.push({text: wholeMatch, codeblock: codeblock}) - 1) + 'G\\n\\n';\n  });\n\n  // attacklab: strip sentinel\n  text = text.replace(/¨0/, '');\n\n  return globals.converter._dispatch('githubCodeBlocks.after', text, options, globals);\n});\n\r\nshowdown.subParser('hashBlock', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('hashBlock.before', text, options, globals);\n  text = text.replace(/(^\\n+|\\n+$)/g, '');\n  text = '\\n\\n¨K' + (globals.gHtmlBlocks.push(text) - 1) + 'K\\n\\n';\n  text = globals.converter._dispatch('hashBlock.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Hash and escape <code> elements that should not be parsed as markdown\n */\nshowdown.subParser('hashCodeTags', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('hashCodeTags.before', text, options, globals);\n\n  var repFunc = function (wholeMatch, match, left, right) {\n    var codeblock = left + showdown.subParser('encodeCode')(match, options, globals) + right;\n    return '¨C' + (globals.gHtmlSpans.push(codeblock) - 1) + 'C';\n  };\n\n  // Hash naked <code>\n  text = showdown.helper.replaceRecursiveRegExp(text, repFunc, '<code\\\\b[^>]*>', '</code>', 'gim');\n\n  text = globals.converter._dispatch('hashCodeTags.after', text, options, globals);\n  return text;\n});\n\r\nshowdown.subParser('hashElement', function (text, options, globals) {\n  'use strict';\n\n  return function (wholeMatch, m1) {\n    var blockText = m1;\n\n    // Undo double lines\n    blockText = blockText.replace(/\\n\\n/g, '\\n');\n    blockText = blockText.replace(/^\\n/, '');\n\n    // strip trailing blank lines\n    blockText = blockText.replace(/\\n+$/g, '');\n\n    // Replace the element text with a marker (\"¨KxK\" where x is its key)\n    blockText = '\\n\\n¨K' + (globals.gHtmlBlocks.push(blockText) - 1) + 'K\\n\\n';\n\n    return blockText;\n  };\n});\n\r\nshowdown.subParser('hashHTMLBlocks', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('hashHTMLBlocks.before', text, options, globals);\n\n  var blockTags = [\n        'pre',\n        'div',\n        'h1',\n        'h2',\n        'h3',\n        'h4',\n        'h5',\n        'h6',\n        'blockquote',\n        'table',\n        'dl',\n        'ol',\n        'ul',\n        'script',\n        'noscript',\n        'form',\n        'fieldset',\n        'iframe',\n        'math',\n        'style',\n        'section',\n        'header',\n        'footer',\n        'nav',\n        'article',\n        'aside',\n        'address',\n        'audio',\n        'canvas',\n        'figure',\n        'hgroup',\n        'output',\n        'video',\n        'p'\n      ],\n      repFunc = function (wholeMatch, match, left, right) {\n        var txt = wholeMatch;\n        // check if this html element is marked as markdown\n        // if so, it's contents should be parsed as markdown\n        if (left.search(/\\bmarkdown\\b/) !== -1) {\n          txt = left + globals.converter.makeHtml(match) + right;\n        }\n        return '\\n\\n¨K' + (globals.gHtmlBlocks.push(txt) - 1) + 'K\\n\\n';\n      };\n\n  for (var i = 0; i < blockTags.length; ++i) {\n    text = showdown.helper.replaceRecursiveRegExp(text, repFunc, '^ {0,3}<' + blockTags[i] + '\\\\b[^>]*>', '</' + blockTags[i] + '>', 'gim');\n  }\n\n  // HR SPECIAL CASE\n  text = text.replace(/(\\n {0,3}(<(hr)\\b([^<>])*?\\/?>)[ \\t]*(?=\\n{2,}))/g,\n    showdown.subParser('hashElement')(text, options, globals));\n\n  // Special case for standalone HTML comments\n  text = showdown.helper.replaceRecursiveRegExp(text, function (txt) {\n    return '\\n\\n¨K' + (globals.gHtmlBlocks.push(txt) - 1) + 'K\\n\\n';\n  }, '^ {0,3}<!--', '-->', 'gm');\n\n  // PHP and ASP-style processor instructions (<?...?> and <%...%>)\n  text = text.replace(/(?:\\n\\n)( {0,3}(?:<([?%])[^\\r]*?\\2>)[ \\t]*(?=\\n{2,}))/g,\n    showdown.subParser('hashElement')(text, options, globals));\n\n  text = globals.converter._dispatch('hashHTMLBlocks.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Hash span elements that should not be parsed as markdown\n */\nshowdown.subParser('hashHTMLSpans', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('hashHTMLSpans.before', text, options, globals);\n\n  function hashHTMLSpan (html) {\n    return '¨C' + (globals.gHtmlSpans.push(html) - 1) + 'C';\n  }\n\n  // Hash Self Closing tags\n  text = text.replace(/<[^>]+?\\/>/gi, function (wm) {\n    return hashHTMLSpan(wm);\n  });\n\n  // Hash tags without properties\n  text = text.replace(/<([^>]+?)>[\\s\\S]*?<\\/\\1>/g, function (wm) {\n    return hashHTMLSpan(wm);\n  });\n\n  // Hash tags with properties\n  text = text.replace(/<([^>]+?)\\s[^>]+?>[\\s\\S]*?<\\/\\1>/g, function (wm) {\n    return hashHTMLSpan(wm);\n  });\n\n  // Hash self closing tags without />\n  text = text.replace(/<[^>]+?>/gi, function (wm) {\n    return hashHTMLSpan(wm);\n  });\n\n  /*showdown.helper.matchRecursiveRegExp(text, '<code\\\\b[^>]*>', '</code>', 'gi');*/\n\n  text = globals.converter._dispatch('hashHTMLSpans.after', text, options, globals);\n  return text;\n});\n\n/**\n * Unhash HTML spans\n */\nshowdown.subParser('unhashHTMLSpans', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('unhashHTMLSpans.before', text, options, globals);\n\n  for (var i = 0; i < globals.gHtmlSpans.length; ++i) {\n    var repText = globals.gHtmlSpans[i],\n        // limiter to prevent infinite loop (assume 10 as limit for recurse)\n        limit = 0;\n\n    while (/¨C(\\d+)C/.test(repText)) {\n      var num = RegExp.$1;\n      repText = repText.replace('¨C' + num + 'C', globals.gHtmlSpans[num]);\n      if (limit === 10) {\n        break;\n      }\n      ++limit;\n    }\n    text = text.replace('¨C' + i + 'C', repText);\n  }\n\n  text = globals.converter._dispatch('unhashHTMLSpans.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Hash and escape <pre><code> elements that should not be parsed as markdown\n */\nshowdown.subParser('hashPreCodeTags', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('hashPreCodeTags.before', text, options, globals);\n\n  var repFunc = function (wholeMatch, match, left, right) {\n    // encode html entities\n    var codeblock = left + showdown.subParser('encodeCode')(match, options, globals) + right;\n    return '\\n\\n¨G' + (globals.ghCodeBlocks.push({text: wholeMatch, codeblock: codeblock}) - 1) + 'G\\n\\n';\n  };\n\n  // Hash <pre><code>\n  text = showdown.helper.replaceRecursiveRegExp(text, repFunc, '^ {0,3}<pre\\\\b[^>]*>\\\\s*<code\\\\b[^>]*>', '^ {0,3}</code>\\\\s*</pre>', 'gim');\n\n  text = globals.converter._dispatch('hashPreCodeTags.after', text, options, globals);\n  return text;\n});\n\r\nshowdown.subParser('headers', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('headers.before', text, options, globals);\n\n  var headerLevelStart = (isNaN(parseInt(options.headerLevelStart))) ? 1 : parseInt(options.headerLevelStart),\n      ghHeaderId = options.ghCompatibleHeaderId,\n\n  // Set text-style headers:\n  //\tHeader 1\n  //\t========\n  //\n  //\tHeader 2\n  //\t--------\n  //\n      setextRegexH1 = (options.smoothLivePreview) ? /^(.+)[ \\t]*\\n={2,}[ \\t]*\\n+/gm : /^(.+)[ \\t]*\\n=+[ \\t]*\\n+/gm,\n      setextRegexH2 = (options.smoothLivePreview) ? /^(.+)[ \\t]*\\n-{2,}[ \\t]*\\n+/gm : /^(.+)[ \\t]*\\n-+[ \\t]*\\n+/gm;\n\n  text = text.replace(setextRegexH1, function (wholeMatch, m1) {\n\n    var spanGamut = showdown.subParser('spanGamut')(m1, options, globals),\n        hID = (options.noHeaderId) ? '' : ' id=\"' + headerId(m1) + '\"',\n        hLevel = headerLevelStart,\n        hashBlock = '<h' + hLevel + hID + '>' + spanGamut + '</h' + hLevel + '>';\n    return showdown.subParser('hashBlock')(hashBlock, options, globals);\n  });\n\n  text = text.replace(setextRegexH2, function (matchFound, m1) {\n    var spanGamut = showdown.subParser('spanGamut')(m1, options, globals),\n        hID = (options.noHeaderId) ? '' : ' id=\"' + headerId(m1) + '\"',\n        hLevel = headerLevelStart + 1,\n        hashBlock = '<h' + hLevel + hID + '>' + spanGamut + '</h' + hLevel + '>';\n    return showdown.subParser('hashBlock')(hashBlock, options, globals);\n  });\n\n  // atx-style headers:\n  //  # Header 1\n  //  ## Header 2\n  //  ## Header 2 with closing hashes ##\n  //  ...\n  //  ###### Header 6\n  //\n  var atxStyle = (options.requireSpaceBeforeHeadingText) ? /^(#{1,6})[ \\t]+(.+?)[ \\t]*#*\\n+/gm : /^(#{1,6})[ \\t]*(.+?)[ \\t]*#*\\n+/gm;\n\n  text = text.replace(atxStyle, function (wholeMatch, m1, m2) {\n    var span = showdown.subParser('spanGamut')(m2, options, globals),\n        hID = (options.noHeaderId) ? '' : ' id=\"' + headerId(m2) + '\"',\n        hLevel = headerLevelStart - 1 + m1.length,\n        header = '<h' + hLevel + hID + '>' + span + '</h' + hLevel + '>';\n\n    return showdown.subParser('hashBlock')(header, options, globals);\n  });\n\n  function headerId (m) {\n    var title;\n    // Prefix id to prevent causing inadvertent pre-existing style matches.\n    if (showdown.helper.isString(options.prefixHeaderId)) {\n      title = options.prefixHeaderId + m;\n    } else if (options.prefixHeaderId === true) {\n      title = 'section ' + m;\n    } else {\n      title = m;\n    }\n\n    if (ghHeaderId) {\n      title = title\n        .replace(/ /g, '-')\n        // replace previously escaped chars (&, ¨ and $)\n        .replace(/&amp;/g, '')\n        .replace(/¨T/g, '')\n        .replace(/¨D/g, '')\n        // replace rest of the chars (&~$ are repeated as they might have been escaped)\n        // borrowed from github's redcarpet (some they should produce similar results)\n        .replace(/[&+$,\\/:;=?@\"#{}|^¨~\\[\\]`\\\\*)(%.!'<>]/g, '')\n        .toLowerCase();\n    } else {\n      title = title\n        .replace(/[^\\w]/g, '')\n        .toLowerCase();\n    }\n\n    if (globals.hashLinkCounts[title]) {\n      title = title + '-' + (globals.hashLinkCounts[title]++);\n    } else {\n      globals.hashLinkCounts[title] = 1;\n    }\n    return title;\n  }\n\n  text = globals.converter._dispatch('headers.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Turn Markdown link shortcuts into XHTML <a> tags.\n */\nshowdown.subParser('horizontalRule', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('horizontalRule.before', text, options, globals);\n\n  var key = showdown.subParser('hashBlock')('<hr />', options, globals);\n  text = text.replace(/^ {0,2}( ?-){3,}[ \\t]*$/gm, key);\n  text = text.replace(/^ {0,2}( ?\\*){3,}[ \\t]*$/gm, key);\n  text = text.replace(/^ {0,2}( ?_){3,}[ \\t]*$/gm, key);\n\n  text = globals.converter._dispatch('horizontalRule.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Turn Markdown image shortcuts into <img> tags.\n */\nshowdown.subParser('images', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('images.before', text, options, globals);\n\n  var inlineRegExp    = /!\\[(.*?)]\\s?\\([ \\t]*()<?(\\S+?)>?(?: =([*\\d]+[A-Za-z%]{0,4})x([*\\d]+[A-Za-z%]{0,4}))?[ \\t]*(?:(['\"])(.*?)\\6[ \\t]*)?\\)/g,\n      referenceRegExp = /!\\[([^\\]]*?)] ?(?:\\n *)?\\[(.*?)]()()()()()/g;\n\n  function writeImageTag (wholeMatch, altText, linkId, url, width, height, m5, title) {\n\n    var gUrls   = globals.gUrls,\n        gTitles = globals.gTitles,\n        gDims   = globals.gDimensions;\n\n    linkId = linkId.toLowerCase();\n\n    if (!title) {\n      title = '';\n    }\n\n    if (url === '' || url === null) {\n      if (linkId === '' || linkId === null) {\n        // lower-case and turn embedded newlines into spaces\n        linkId = altText.toLowerCase().replace(/ ?\\n/g, ' ');\n      }\n      url = '#' + linkId;\n\n      if (!showdown.helper.isUndefined(gUrls[linkId])) {\n        url = gUrls[linkId];\n        if (!showdown.helper.isUndefined(gTitles[linkId])) {\n          title = gTitles[linkId];\n        }\n        if (!showdown.helper.isUndefined(gDims[linkId])) {\n          width = gDims[linkId].width;\n          height = gDims[linkId].height;\n        }\n      } else {\n        return wholeMatch;\n      }\n    }\n\n    altText = altText\n      .replace(/\"/g, '&quot;')\n    //altText = showdown.helper.escapeCharacters(altText, '*_', false);\n      .replace(showdown.helper.regexes.asteriskAndDash, showdown.helper.escapeCharactersCallback);\n    //url = showdown.helper.escapeCharacters(url, '*_', false);\n    url = url.replace(showdown.helper.regexes.asteriskAndDash, showdown.helper.escapeCharactersCallback);\n    var result = '<img src=\"' + url + '\" alt=\"' + altText + '\"';\n\n    if (title) {\n      title = title\n        .replace(/\"/g, '&quot;')\n      //title = showdown.helper.escapeCharacters(title, '*_', false);\n        .replace(showdown.helper.regexes.asteriskAndDash, showdown.helper.escapeCharactersCallback);\n      result += ' title=\"' + title + '\"';\n    }\n\n    if (width && height) {\n      width  = (width === '*') ? 'auto' : width;\n      height = (height === '*') ? 'auto' : height;\n\n      result += ' width=\"' + width + '\"';\n      result += ' height=\"' + height + '\"';\n    }\n\n    result += ' />';\n\n    return result;\n  }\n\n  // First, handle reference-style labeled images: ![alt text][id]\n  text = text.replace(referenceRegExp, writeImageTag);\n\n  // Next, handle inline images:  ![alt text](url =<width>x<height> \"optional title\")\n  text = text.replace(inlineRegExp, writeImageTag);\n\n  text = globals.converter._dispatch('images.after', text, options, globals);\n  return text;\n});\n\r\nshowdown.subParser('italicsAndBold', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('italicsAndBold.before', text, options, globals);\n\n  // it's faster to have 3 separate regexes for each case than have just one\n  // because of backtracing, in some cases, it could lead to an exponential effect\n  // called \"catastrophic backtrace\". Ominous!\n\n  // Parse underscores\n  if (options.literalMidWordUnderscores) {\n    text = text.replace(/\\b___(\\S[\\s\\S]*)___\\b/g, '<strong><em>$1</em></strong>');\n    text = text.replace(/\\b__(\\S[\\s\\S]*)__\\b/g, '<strong>$1</strong>');\n    text = text.replace(/\\b_(\\S[\\s\\S]*?)_\\b/g, '<em>$1</em>');\n  } else {\n    text = text.replace(/___(\\S[\\s\\S]*?)___/g, function (wm, m) {\n      return (/\\S$/.test(m)) ? '<strong><em>' + m + '</em></strong>' : wm;\n    });\n    text = text.replace(/__(\\S[\\s\\S]*?)__/g, function (wm, m) {\n      return (/\\S$/.test(m)) ? '<strong>' + m + '</strong>' : wm;\n    });\n    text = text.replace(/_([^\\s_][\\s\\S]*?)_/g, function (wm, m) {\n      // !/^_[^_]/.test(m) - test if it doesn't start with __ (since it seems redundant, we removed it)\n      return (/\\S$/.test(m)) ? '<em>' + m + '</em>' : wm;\n    });\n  }\n\n  // Now parse asterisks\n  text = text.replace(/\\*\\*\\*(\\S[\\s\\S]*?)\\*\\*\\*/g, function (wm, m) {\n    return (/\\S$/.test(m)) ? '<strong><em>' + m + '</em></strong>' : wm;\n  });\n  text = text.replace(/\\*\\*(\\S[\\s\\S]*?)\\*\\*/g, function (wm, m) {\n    return (/\\S$/.test(m)) ? '<strong>' + m + '</strong>' : wm;\n  });\n  text = text.replace(/\\*([^\\s*][\\s\\S]*?)\\*/g, function (wm, m) {\n    // !/^\\*[^*]/.test(m) - test if it doesn't start with ** (since it seems redundant, we removed it)\n    return (/\\S$/.test(m)) ? '<em>' + m + '</em>' : wm;\n  });\n\n  text = globals.converter._dispatch('italicsAndBold.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Form HTML ordered (numbered) and unordered (bulleted) lists.\n */\nshowdown.subParser('lists', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('lists.before', text, options, globals);\n\n  /**\n   * Process the contents of a single ordered or unordered list, splitting it\n   * into individual list items.\n   * @param {string} listStr\n   * @param {boolean} trimTrailing\n   * @returns {string}\n   */\n  function processListItems (listStr, trimTrailing) {\n    // The $g_list_level global keeps track of when we're inside a list.\n    // Each time we enter a list, we increment it; when we leave a list,\n    // we decrement. If it's zero, we're not in a list anymore.\n    //\n    // We do this because when we're not inside a list, we want to treat\n    // something like this:\n    //\n    //    I recommend upgrading to version\n    //    8. Oops, now this line is treated\n    //    as a sub-list.\n    //\n    // As a single paragraph, despite the fact that the second line starts\n    // with a digit-period-space sequence.\n    //\n    // Whereas when we're inside a list (or sub-list), that line will be\n    // treated as the start of a sub-list. What a kludge, huh? This is\n    // an aspect of Markdown's syntax that's hard to parse perfectly\n    // without resorting to mind-reading. Perhaps the solution is to\n    // change the syntax rules such that sub-lists must start with a\n    // starting cardinal number; e.g. \"1.\" or \"a.\".\n    globals.gListLevel++;\n\n    // trim trailing blank lines:\n    listStr = listStr.replace(/\\n{2,}$/, '\\n');\n\n    // attacklab: add sentinel to emulate \\z\n    listStr += '¨0';\n\n    var rgx = /(\\n)?(^ {0,3})([*+-]|\\d+[.])[ \\t]+((\\[(x|X| )?])?[ \\t]*[^\\r]+?(\\n{1,2}))(?=\\n*(¨0| {0,3}([*+-]|\\d+[.])[ \\t]+))/gm,\n        isParagraphed = (/\\n[ \\t]*\\n(?!¨0)/.test(listStr));\n\n    // Since version 1.5, nesting sublists requires 4 spaces (or 1 tab) indentation,\n    // which is a syntax breaking change\n    // activating this option reverts to old behavior\n    if (options.disableForced4SpacesIndentedSublists) {\n      rgx = /(\\n)?(^ {0,3})([*+-]|\\d+[.])[ \\t]+((\\[(x|X| )?])?[ \\t]*[^\\r]+?(\\n{1,2}))(?=\\n*(¨0|\\2([*+-]|\\d+[.])[ \\t]+))/gm;\n    }\n\n    listStr = listStr.replace(rgx, function (wholeMatch, m1, m2, m3, m4, taskbtn, checked) {\n      checked = (checked && checked.trim() !== '');\n\n      var item = showdown.subParser('outdent')(m4, options, globals),\n          bulletStyle = '';\n\n      // Support for github tasklists\n      if (taskbtn && options.tasklists) {\n        bulletStyle = ' class=\"task-list-item\" style=\"list-style-type: none;\"';\n        item = item.replace(/^[ \\t]*\\[(x|X| )?]/m, function () {\n          var otp = '<input type=\"checkbox\" disabled style=\"margin: 0px 0.35em 0.25em -1.6em; vertical-align: middle;\"';\n          if (checked) {\n            otp += ' checked';\n          }\n          otp += '>';\n          return otp;\n        });\n      }\n\n      // ISSUE #312\n      // This input: - - - a\n      // causes trouble to the parser, since it interprets it as:\n      // <ul><li><li><li>a</li></li></li></ul>\n      // instead of:\n      // <ul><li>- - a</li></ul>\n      // So, to prevent it, we will put a marker (¨A)in the beginning of the line\n      // Kind of hackish/monkey patching, but seems more effective than overcomplicating the list parser\n      item = item.replace(/^([-*+]|\\d\\.)[ \\t]+[\\S\\n ]*/g, function (wm2) {\n        return '¨A' + wm2;\n      });\n\n      // m1 - Leading line or\n      // Has a double return (multi paragraph) or\n      // Has sublist\n      if (m1 || (item.search(/\\n{2,}/) > -1)) {\n        item = showdown.subParser('githubCodeBlocks')(item, options, globals);\n        item = showdown.subParser('blockGamut')(item, options, globals);\n      } else {\n        // Recursion for sub-lists:\n        item = showdown.subParser('lists')(item, options, globals);\n        item = item.replace(/\\n$/, ''); // chomp(item)\n        item = showdown.subParser('hashHTMLBlocks')(item, options, globals);\n        // Colapse double linebreaks\n        item = item.replace(/\\n\\n+/g, '\\n\\n');\n        // replace double linebreaks with a placeholder\n        item = item.replace(/\\n\\n/g, '¨B');\n        if (isParagraphed) {\n          item = showdown.subParser('paragraphs')(item, options, globals);\n        } else {\n          item = showdown.subParser('spanGamut')(item, options, globals);\n        }\n        item = item.replace(/¨B/g, '\\n\\n');\n      }\n\n      // now we need to remove the marker (¨A)\n      item = item.replace('¨A', '');\n      // we can finally wrap the line in list item tags\n      item =  '<li' + bulletStyle + '>' + item + '</li>\\n';\n\n      return item;\n    });\n\n    // attacklab: strip sentinel\n    listStr = listStr.replace(/¨0/g, '');\n\n    globals.gListLevel--;\n\n    if (trimTrailing) {\n      listStr = listStr.replace(/\\s+$/, '');\n    }\n\n    return listStr;\n  }\n\n  /**\n   * Check and parse consecutive lists (better fix for issue #142)\n   * @param {string} list\n   * @param {string} listType\n   * @param {boolean} trimTrailing\n   * @returns {string}\n   */\n  function parseConsecutiveLists (list, listType, trimTrailing) {\n    // check if we caught 2 or more consecutive lists by mistake\n    // we use the counterRgx, meaning if listType is UL we look for OL and vice versa\n    var olRgx = (options.disableForced4SpacesIndentedSublists) ? /^ ?\\d+\\.[ \\t]/gm : /^ {0,3}\\d+\\.[ \\t]/gm,\n        ulRgx = (options.disableForced4SpacesIndentedSublists) ? /^ ?[*+-][ \\t]/gm : /^ {0,3}[*+-][ \\t]/gm,\n        counterRxg = (listType === 'ul') ? olRgx : ulRgx,\n        result = '';\n\n    if (list.search(counterRxg) !== -1) {\n      (function parseCL (txt) {\n        var pos = txt.search(counterRxg);\n        if (pos !== -1) {\n          // slice\n          result += '\\n<' + listType + '>\\n' + processListItems(txt.slice(0, pos), !!trimTrailing) + '</' + listType + '>\\n';\n\n          // invert counterType and listType\n          listType = (listType === 'ul') ? 'ol' : 'ul';\n          counterRxg = (listType === 'ul') ? olRgx : ulRgx;\n\n          //recurse\n          parseCL(txt.slice(pos));\n        } else {\n          result += '\\n<' + listType + '>\\n' + processListItems(txt, !!trimTrailing) + '</' + listType + '>\\n';\n        }\n      })(list);\n    } else {\n      result = '\\n<' + listType + '>\\n' + processListItems(list, !!trimTrailing) + '</' + listType + '>\\n';\n    }\n\n    return result;\n  }\n\n  // add sentinel to hack around khtml/safari bug:\n  // http://bugs.webkit.org/show_bug.cgi?id=11231\n  text += '¨0';\n\n  if (globals.gListLevel) {\n    text = text.replace(/^(( {0,3}([*+-]|\\d+[.])[ \\t]+)[^\\r]+?(¨0|\\n{2,}(?=\\S)(?![ \\t]*(?:[*+-]|\\d+[.])[ \\t]+)))/gm,\n      function (wholeMatch, list, m2) {\n        var listType = (m2.search(/[*+-]/g) > -1) ? 'ul' : 'ol';\n        return parseConsecutiveLists(list, listType, true);\n      }\n    );\n  } else {\n    text = text.replace(/(\\n\\n|^\\n?)(( {0,3}([*+-]|\\d+[.])[ \\t]+)[^\\r]+?(¨0|\\n{2,}(?=\\S)(?![ \\t]*(?:[*+-]|\\d+[.])[ \\t]+)))/gm,\n      function (wholeMatch, m1, list, m3) {\n        var listType = (m3.search(/[*+-]/g) > -1) ? 'ul' : 'ol';\n        return parseConsecutiveLists(list, listType, false);\n      }\n    );\n  }\n\n  // strip sentinel\n  text = text.replace(/¨0/, '');\n  text = globals.converter._dispatch('lists.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Remove one level of line-leading tabs or spaces\n */\nshowdown.subParser('outdent', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('outdent.before', text, options, globals);\n\n  // attacklab: hack around Konqueror 3.5.4 bug:\n  // \"----------bug\".replace(/^-/g,\"\") == \"bug\"\n  text = text.replace(/^(\\t|[ ]{1,4})/gm, '¨0'); // attacklab: g_tab_width\n\n  // attacklab: clean up hack\n  text = text.replace(/¨0/g, '');\n\n  text = globals.converter._dispatch('outdent.after', text, options, globals);\n  return text;\n});\n\r\n/**\n *\n */\nshowdown.subParser('paragraphs', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('paragraphs.before', text, options, globals);\n  // Strip leading and trailing lines:\n  text = text.replace(/^\\n+/g, '');\n  text = text.replace(/\\n+$/g, '');\n\n  var grafs = text.split(/\\n{2,}/g),\n      grafsOut = [],\n      end = grafs.length; // Wrap <p> tags\n\n  for (var i = 0; i < end; i++) {\n    var str = grafs[i];\n    // if this is an HTML marker, copy it\n    if (str.search(/¨(K|G)(\\d+)\\1/g) >= 0) {\n      grafsOut.push(str);\n\n    // test for presence of characters to prevent empty lines being parsed\n    // as paragraphs (resulting in undesired extra empty paragraphs)\n    } else if (str.search(/\\S/) >= 0) {\n      str = showdown.subParser('spanGamut')(str, options, globals);\n      str = str.replace(/^([ \\t]*)/g, '<p>');\n      str += '</p>';\n      grafsOut.push(str);\n    }\n  }\n\n  /** Unhashify HTML blocks */\n  end = grafsOut.length;\n  for (i = 0; i < end; i++) {\n    var blockText = '',\n        grafsOutIt = grafsOut[i],\n        codeFlag = false;\n    // if this is a marker for an html block...\n    // use RegExp.test instead of string.search because of QML bug\n    while (/¨(K|G)(\\d+)\\1/.test(grafsOutIt)) {\n      var delim = RegExp.$1,\n          num   = RegExp.$2;\n\n      if (delim === 'K') {\n        blockText = globals.gHtmlBlocks[num];\n      } else {\n        // we need to check if ghBlock is a false positive\n        if (codeFlag) {\n          // use encoded version of all text\n          blockText = showdown.subParser('encodeCode')(globals.ghCodeBlocks[num].text, options, globals);\n        } else {\n          blockText = globals.ghCodeBlocks[num].codeblock;\n        }\n      }\n      blockText = blockText.replace(/\\$/g, '$$$$'); // Escape any dollar signs\n\n      grafsOutIt = grafsOutIt.replace(/(\\n\\n)?¨(K|G)\\d+\\2(\\n\\n)?/, blockText);\n      // Check if grafsOutIt is a pre->code\n      if (/^<pre\\b[^>]*>\\s*<code\\b[^>]*>/.test(grafsOutIt)) {\n        codeFlag = true;\n      }\n    }\n    grafsOut[i] = grafsOutIt;\n  }\n  text = grafsOut.join('\\n');\n  // Strip leading and trailing lines:\n  text = text.replace(/^\\n+/g, '');\n  text = text.replace(/\\n+$/g, '');\n  return globals.converter._dispatch('paragraphs.after', text, options, globals);\n});\n\r\n/**\n * Run extension\n */\nshowdown.subParser('runExtension', function (ext, text, options, globals) {\n  'use strict';\n\n  if (ext.filter) {\n    text = ext.filter(text, globals.converter, options);\n\n  } else if (ext.regex) {\n    // TODO remove this when old extension loading mechanism is deprecated\n    var re = ext.regex;\n    if (!(re instanceof RegExp)) {\n      re = new RegExp(re, 'g');\n    }\n    text = text.replace(re, ext.replace);\n  }\n\n  return text;\n});\n\r\n/**\n * These are all the transformations that occur *within* block-level\n * tags like paragraphs, headers, and list items.\n */\nshowdown.subParser('spanGamut', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('spanGamut.before', text, options, globals);\n  text = showdown.subParser('codeSpans')(text, options, globals);\n  text = showdown.subParser('escapeSpecialCharsWithinTagAttributes')(text, options, globals);\n  text = showdown.subParser('encodeBackslashEscapes')(text, options, globals);\n\n  // Process anchor and image tags. Images must come first,\n  // because ![foo][f] looks like an anchor.\n  text = showdown.subParser('images')(text, options, globals);\n  text = showdown.subParser('anchors')(text, options, globals);\n\n  // Make links out of things like `<http://example.com/>`\n  // Must come after _DoAnchors(), because you can use < and >\n  // delimiters in inline links like [this](<url>).\n  text = showdown.subParser('autoLinks')(text, options, globals);\n  text = showdown.subParser('italicsAndBold')(text, options, globals);\n  text = showdown.subParser('strikethrough')(text, options, globals);\n\n  // we need to hash HTML tags inside spans\n  text = showdown.subParser('hashHTMLSpans')(text, options, globals);\n\n  // now we encode amps and angles\n  text = showdown.subParser('encodeAmpsAndAngles')(text, options, globals);\n\n  // Do hard breaks\n  if (options.simpleLineBreaks) {\n    // GFM style hard breaks\n    text = text.replace(/\\n/g, '<br />\\n');\n  } else {\n    // Vanilla hard breaks\n    text = text.replace(/  +\\n/g, '<br />\\n');\n  }\n\n  text = globals.converter._dispatch('spanGamut.after', text, options, globals);\n  return text;\n});\n\r\nshowdown.subParser('strikethrough', function (text, options, globals) {\n  'use strict';\n\n  if (options.strikethrough) {\n    text = globals.converter._dispatch('strikethrough.before', text, options, globals);\n    text = text.replace(/(?:~){2}([\\s\\S]+?)(?:~){2}/g, '<del>$1</del>');\n    text = globals.converter._dispatch('strikethrough.after', text, options, globals);\n  }\n\n  return text;\n});\n\r\n/**\n * Strips link definitions from text, stores the URLs and titles in\n * hash references.\n * Link defs are in the form: ^[id]: url \"optional title\"\n */\nshowdown.subParser('stripLinkDefinitions', function (text, options, globals) {\n  'use strict';\n\n  var regex = /^ {0,3}\\[(.+)]:[ \\t]*\\n?[ \\t]*<?(\\S+?)>?(?: =([*\\d]+[A-Za-z%]{0,4})x([*\\d]+[A-Za-z%]{0,4}))?[ \\t]*\\n?[ \\t]*(?:(\\n*)[\"|'(](.+?)[\"|')][ \\t]*)?(?:\\n+|(?=¨0))/gm;\n\n  // attacklab: sentinel workarounds for lack of \\A and \\Z, safari\\khtml bug\n  text += '¨0';\n\n  text = text.replace(regex, function (wholeMatch, linkId, url, width, height, blankLines, title) {\n    linkId = linkId.toLowerCase();\n    globals.gUrls[linkId] = showdown.subParser('encodeAmpsAndAngles')(url, options, globals);  // Link IDs are case-insensitive\n\n    if (blankLines) {\n      // Oops, found blank lines, so it's not a title.\n      // Put back the parenthetical statement we stole.\n      return blankLines + title;\n\n    } else {\n      if (title) {\n        globals.gTitles[linkId] = title.replace(/\"|'/g, '&quot;');\n      }\n      if (options.parseImgDimensions && width && height) {\n        globals.gDimensions[linkId] = {\n          width:  width,\n          height: height\n        };\n      }\n    }\n    // Completely remove the definition from the text\n    return '';\n  });\n\n  // attacklab: strip sentinel\n  text = text.replace(/¨0/, '');\n\n  return text;\n});\n\r\nshowdown.subParser('tables', function (text, options, globals) {\n  'use strict';\n\n  if (!options.tables) {\n    return text;\n  }\n\n  var tableRgx = /^ {0,3}\\|?.+\\|.+\\n[ \\t]{0,3}\\|?[ \\t]*:?[ \\t]*(?:-|=){2,}[ \\t]*:?[ \\t]*\\|[ \\t]*:?[ \\t]*(?:-|=){2,}[\\s\\S]+?(?:\\n\\n|¨0)/gm;\n\n  function parseStyles (sLine) {\n    if (/^:[ \\t]*--*$/.test(sLine)) {\n      return ' style=\"text-align:left;\"';\n    } else if (/^--*[ \\t]*:[ \\t]*$/.test(sLine)) {\n      return ' style=\"text-align:right;\"';\n    } else if (/^:[ \\t]*--*[ \\t]*:$/.test(sLine)) {\n      return ' style=\"text-align:center;\"';\n    } else {\n      return '';\n    }\n  }\n\n  function parseHeaders (header, style) {\n    var id = '';\n    header = header.trim();\n    if (options.tableHeaderId) {\n      id = ' id=\"' + header.replace(/ /g, '_').toLowerCase() + '\"';\n    }\n    header = showdown.subParser('spanGamut')(header, options, globals);\n\n    return '<th' + id + style + '>' + header + '</th>\\n';\n  }\n\n  function parseCells (cell, style) {\n    var subText = showdown.subParser('spanGamut')(cell, options, globals);\n    return '<td' + style + '>' + subText + '</td>\\n';\n  }\n\n  function buildTable (headers, cells) {\n    var tb = '<table>\\n<thead>\\n<tr>\\n',\n        tblLgn = headers.length;\n\n    for (var i = 0; i < tblLgn; ++i) {\n      tb += headers[i];\n    }\n    tb += '</tr>\\n</thead>\\n<tbody>\\n';\n\n    for (i = 0; i < cells.length; ++i) {\n      tb += '<tr>\\n';\n      for (var ii = 0; ii < tblLgn; ++ii) {\n        tb += cells[i][ii];\n      }\n      tb += '</tr>\\n';\n    }\n    tb += '</tbody>\\n</table>\\n';\n    return tb;\n  }\n\n  text = globals.converter._dispatch('tables.before', text, options, globals);\n\n  text = text.replace(tableRgx, function (rawTable) {\n\n    var i, tableLines = rawTable.split('\\n');\n\n    // strip wrong first and last column if wrapped tables are used\n    for (i = 0; i < tableLines.length; ++i) {\n      if (/^ {0,3}\\|/.test(tableLines[i])) {\n        tableLines[i] = tableLines[i].replace(/^ {0,3}\\|/, '');\n      }\n      if (/\\|[ \\t]*$/.test(tableLines[i])) {\n        tableLines[i] = tableLines[i].replace(/\\|[ \\t]*$/, '');\n      }\n    }\n\n    var rawHeaders = tableLines[0].split('|').map(function (s) { return s.trim();}),\n        rawStyles = tableLines[1].split('|').map(function (s) { return s.trim();}),\n        rawCells = [],\n        headers = [],\n        styles = [],\n        cells = [];\n\n    tableLines.shift();\n    tableLines.shift();\n\n    for (i = 0; i < tableLines.length; ++i) {\n      if (tableLines[i].trim() === '') {\n        continue;\n      }\n      rawCells.push(\n        tableLines[i]\n          .split('|')\n          .map(function (s) {\n            return s.trim();\n          })\n      );\n    }\n\n    if (rawHeaders.length < rawStyles.length) {\n      return rawTable;\n    }\n\n    for (i = 0; i < rawStyles.length; ++i) {\n      styles.push(parseStyles(rawStyles[i]));\n    }\n\n    for (i = 0; i < rawHeaders.length; ++i) {\n      if (showdown.helper.isUndefined(styles[i])) {\n        styles[i] = '';\n      }\n      headers.push(parseHeaders(rawHeaders[i], styles[i]));\n    }\n\n    for (i = 0; i < rawCells.length; ++i) {\n      var row = [];\n      for (var ii = 0; ii < headers.length; ++ii) {\n        if (showdown.helper.isUndefined(rawCells[i][ii])) {\n\n        }\n        row.push(parseCells(rawCells[i][ii], styles[ii]));\n      }\n      cells.push(row);\n    }\n\n    return buildTable(headers, cells);\n  });\n\n  text = globals.converter._dispatch('tables.after', text, options, globals);\n\n  return text;\n});\n\r\n/**\n * Swap back in all the special characters we've hidden.\n */\nshowdown.subParser('unescapeSpecialChars', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('unescapeSpecialChars.before', text, options, globals);\n\n  text = text.replace(/¨E(\\d+)E/g, function (wholeMatch, m1) {\n    var charCodeToReplace = parseInt(m1);\n    return String.fromCharCode(charCodeToReplace);\n  });\n\n  text = globals.converter._dispatch('unescapeSpecialChars.after', text, options, globals);\n  return text;\n});\n\r\nvar root = this;\n\n// CommonJS/nodeJS Loader\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = showdown;\n\n// AMD Loader\n} else if (true) {\n  !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return showdown;\n  }.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n// Regular Browser loader\n} else {\n  root.showdown = showdown;\n}\n}).call(this);\r\n\n//# sourceMappingURL=showdown.js.map\r\n\n\n/***/ }),\n\n/***/ 591:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _utils = __webpack_require__(492);\n\nexports.default = {\n  data: function data() {\n    return {\n      theme: '',\n      tags: [{ name: '标签一', type: '' }, { name: '标签二', type: 'gray' }, { name: '标签三', type: 'primary' }, { name: '标签四', type: 'success' }, { name: '标签五', type: 'warning' }, { name: '标签六', type: 'danger' }],\n      inputVisible: false,\n      inputValue: ''\n    };\n  },\n\n  watch: {\n    theme: function theme() {\n      (0, _utils.toggleClass)(document.body, 'custom-theme');\n    }\n  },\n  methods: {}\n};\n\n/***/ }),\n\n/***/ 629:\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(289)();\n// imports\n\n\n// module\nexports.push([module.i, \".box-card[data-v-6542018a]{width:400px;margin:20px auto}.block[data-v-6542018a]{padding:30px 24px}.alert-item[data-v-6542018a]{margin-bottom:10px}.tag-item[data-v-6542018a]{margin-right:15px}\", \"\", {\"version\":3,\"sources\":[\"/./src/views/theme/index.vue\"],\"names\":[],\"mappings\":\"AACA,2BACE,YAAa,AACb,gBAAkB,CACnB,AACD,wBACE,iBAAmB,CACpB,AACD,6BACE,kBAAoB,CACrB,AACD,2BACE,iBAAmB,CACpB\",\"file\":\"index.vue\",\"sourcesContent\":[\"\\n.box-card[data-v-6542018a]{\\n  width: 400px;\\n  margin: 20px auto;\\n}\\n.block[data-v-6542018a]{\\n  padding: 30px 24px;\\n}\\n.alert-item[data-v-6542018a]{\\n  margin-bottom: 10px;\\n}\\n.tag-item[data-v-6542018a]{\\n  margin-right: 15px;\\n}\\n\"],\"sourceRoot\":\"webpack://\"}]);\n\n// exports\n\n\n/***/ }),\n\n/***/ 686:\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(629);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(290)(\"54e31c2c\", content, true);\n// Hot Module Replacement\nif(false) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../../../node_modules/css-loader/index.js?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"id\\\":\\\"data-v-6542018a\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./index.vue\", function() {\n     var newContent = require(\"!!../../../node_modules/css-loader/index.js?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"id\\\":\\\"data-v-6542018a\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./index.vue\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}\n\n/***/ }),\n\n/***/ 762:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"app-container\"\n  }, [_c('code', [_vm._v(\"会补动态换肤的教程\")]), _vm._v(\" \"), _c('el-card', {\n    staticClass: \"box-card\"\n  }, [_c('div', {\n    slot: \"header\"\n  }, [_c('span', {\n    staticStyle: {\n      \"line-height\": \"36px\"\n    }\n  }, [_vm._v(\"偏好设置\")])]), _vm._v(\" \"), _c('div', {\n    staticClass: \"box-item\"\n  }, [_c('span', {\n    staticClass: \"field-label\"\n  }, [_vm._v(\"换肤:\")]), _vm._v(\" \"), _c('el-switch', {\n    attrs: {\n      \"on-text\": \"\",\n      \"off-text\": \"\"\n    },\n    model: {\n      value: (_vm.theme),\n      callback: function($$v) {\n        _vm.theme = $$v\n      },\n      expression: \"theme\"\n    }\n  })], 1)]), _vm._v(\" \"), _c('div', {\n    staticClass: \"block\"\n  }, [_c('span', {\n    staticClass: \"demonstration\"\n  }, [_vm._v(\"Button: \")]), _vm._v(\" \"), _c('span', {\n    staticClass: \"wrapper\"\n  }, [_c('el-button', {\n    attrs: {\n      \"type\": \"success\"\n    }\n  }, [_vm._v(\"成功按钮\")]), _vm._v(\" \"), _c('el-button', {\n    attrs: {\n      \"type\": \"warning\"\n    }\n  }, [_vm._v(\"警告按钮\")]), _vm._v(\" \"), _c('el-button', {\n    attrs: {\n      \"type\": \"danger\"\n    }\n  }, [_vm._v(\"危险按钮\")]), _vm._v(\" \"), _c('el-button', {\n    attrs: {\n      \"type\": \"info\"\n    }\n  }, [_vm._v(\"信息按钮\")])], 1)]), _vm._v(\" \"), _c('div', {\n    staticClass: \"block\"\n  }, _vm._l((_vm.tags), function(tag) {\n    return _c('el-tag', {\n      key: tag.type,\n      staticClass: \"tag-item\",\n      attrs: {\n        \"type\": tag.type\n      }\n    }, [_vm._v(\"\\n      \" + _vm._s(tag.name) + \"\\n    \")])\n  })), _vm._v(\" \"), _c('div', {\n    staticClass: \"block\"\n  }, [_c('el-alert', {\n    staticClass: \"alert-item\",\n    attrs: {\n      \"title\": \"成功提示的文案\",\n      \"type\": \"success\"\n    }\n  }), _vm._v(\" \"), _c('el-alert', {\n    staticClass: \"alert-item\",\n    attrs: {\n      \"title\": \"消息提示的文案\",\n      \"type\": \"info\"\n    }\n  }), _vm._v(\" \"), _c('el-alert', {\n    staticClass: \"alert-item\",\n    attrs: {\n      \"title\": \"警告提示的文案\",\n      \"type\": \"warning\"\n    }\n  }), _vm._v(\" \"), _c('el-alert', {\n    staticClass: \"alert-item\",\n    attrs: {\n      \"title\": \"错误提示的文案\",\n      \"type\": \"error\"\n    }\n  })], 1)], 1)\n},staticRenderFns: []}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// js/15.a99ab0e9517d69a4f209.js","\n/* styles */\nrequire(\"!!../../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"id\\\":\\\"data-v-6542018a\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./index.vue\")\n\nvar Component = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./index.vue\"),\n  /* template */\n  require(\"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-6542018a\\\"}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./index.vue\"),\n  /* scopeId */\n  \"data-v-6542018a\",\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/theme/index.vue\n// module id = 319\n// module chunks = 15","/**\n * Created by jiachenpan on 16/11/18.\n */\n import showdown from 'showdown' // markdown转化\n const converter = new showdown.Converter();\n\n export function parseTime(time, cFormat) {\n   if (arguments.length === 0) {\n     return null;\n   }\n   const format = cFormat || '{y}-{m}-{d} {h}:{i}:{s}';\n   let date;\n   if (typeof time == 'object') {\n     date = time;\n   } else {\n     if (('' + time).length === 10) time = parseInt(time) * 1000;\n     date = new Date(time);\n   }\n   const formatObj = {\n     y: date.getFullYear(),\n     m: date.getMonth() + 1,\n     d: date.getDate(),\n     h: date.getHours(),\n     i: date.getMinutes(),\n     s: date.getSeconds(),\n     a: date.getDay()\n   };\n   const time_str = format.replace(/{(y|m|d|h|i|s|a)+}/g, (result, key) => {\n     let value = formatObj[key];\n     if (key === 'a') return ['一', '二', '三', '四', '五', '六', '日'][value - 1];\n     if (result.length > 0 && value < 10) {\n       value = '0' + value;\n     }\n     return value || 0;\n   });\n   return time_str;\n }\n\n export function formatTime(time, option) {\n   time = +time * 1000;\n   const d = new Date(time);\n   const now = Date.now();\n\n   const diff = (now - d) / 1000;\n\n   if (diff < 30) {\n     return '刚刚'\n   } else if (diff < 3600) { // less 1 hour\n     return Math.ceil(diff / 60) + '分钟前'\n   } else if (diff < 3600 * 24) {\n     return Math.ceil(diff / 3600) + '小时前'\n   } else if (diff < 3600 * 24 * 2) {\n     return '1天前'\n   }\n   if (option) {\n     return parseTime(time, option)\n   } else {\n     return d.getMonth() + 1 + '月' + d.getDate() + '日' + d.getHours() + '时' + d.getMinutes() + '分'\n   }\n }\n\n// 格式化时间\n export function getQueryObject(url) {\n   url = url == null ? window.location.href : url;\n   const search = url.substring(url.lastIndexOf('?') + 1);\n   const obj = {};\n   const reg = /([^?&=]+)=([^?&=]*)/g;\n   search.replace(reg, (rs, $1, $2) => {\n     const name = decodeURIComponent($1);\n     let val = decodeURIComponent($2);\n     val = String(val);\n     obj[name] = val;\n     return rs;\n   });\n   return obj;\n }\n\n\n/**\n *get getByteLen\n * @param {Sting} val input value\n * @returns {number} output value\n */\n export function getByteLen(val) {\n   let len = 0;\n   for (let i = 0; i < val.length; i++) {\n     if (val[i].match(/[^\\x00-\\xff]/ig) != null) {\n       len += 1;\n     } else { len += 0.5; }\n   }\n   return Math.floor(len);\n }\n\n export function cleanArray(actual) {\n   const newArray = [];\n   for (let i = 0; i < actual.length; i++) {\n     if (actual[i]) {\n       newArray.push(actual[i]);\n     }\n   }\n   return newArray;\n }\n\n export function param(json) {\n   if (!json) return '';\n   return cleanArray(Object.keys(json).map(key => {\n     if (json[key] === undefined) return '';\n     return encodeURIComponent(key) + '=' +\n            encodeURIComponent(json[key]);\n   })).join('&');\n }\n\n export function html2Text(val) {\n   const div = document.createElement('div');\n   div.innerHTML = val;\n   return div.textContent || div.innerText;\n }\n\n export function objectMerge(target, source) {\n    /* Merges two  objects,\n     giving the last one precedence */\n\n   if (typeof target !== 'object') {\n     target = {};\n   }\n   if (Array.isArray(source)) {\n     return source.slice();\n   }\n   for (const property in source) {\n     if (source.hasOwnProperty(property)) {\n       const sourceProperty = source[property];\n       if (typeof sourceProperty === 'object') {\n         target[property] = objectMerge(target[property], sourceProperty);\n         continue;\n       }\n       target[property] = sourceProperty;\n     }\n   }\n   return target;\n }\n\n\n export function scrollTo(element, to, duration) {\n   if (duration <= 0) return;\n   const difference = to - element.scrollTop;\n   const perTick = difference / duration * 10;\n   setTimeout(() => {\n     console.log(new Date())\n     element.scrollTop = element.scrollTop + perTick;\n     if (element.scrollTop === to) return;\n     scrollTo(element, to, duration - 10);\n   }, 10);\n }\n\n export function toggleClass(element, className) {\n   if (!element || !className) {\n     return;\n   }\n   let classString = element.className;\n   const nameIndex = classString.indexOf(className);\n   if (nameIndex === -1) {\n     classString += '' + className;\n   } else {\n     classString = classString.substr(0, nameIndex) + classString.substr(nameIndex + className.length);\n   }\n   element.className = classString;\n }\n\n export const pickerOptions = [\n   {\n     text: '今天',\n     onClick(picker) {\n       const end = new Date();\n       const start = new Date(new Date().toDateString());\n       end.setTime(start.getTime());\n       picker.$emit('pick', [start, end]);\n     }\n   }, {\n     text: '最近一周',\n     onClick(picker) {\n       const end = new Date(new Date().toDateString());\n       const start = new Date();\n       start.setTime(end.getTime() - 3600 * 1000 * 24 * 7);\n       picker.$emit('pick', [start, end]);\n     }\n   }, {\n     text: '最近一个月',\n     onClick(picker) {\n       const end = new Date(new Date().toDateString());\n       const start = new Date();\n       start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);\n       picker.$emit('pick', [start, end]);\n     }\n   }, {\n     text: '最近三个月',\n     onClick(picker) {\n       const end = new Date(new Date().toDateString());\n       const start = new Date();\n       start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);\n       picker.$emit('pick', [start, end]);\n     }\n   }]\n\n export function getTime(type) {\n   if (type === 'start') {\n     return new Date().getTime() - 3600 * 1000 * 24 * 90\n   } else {\n     return new Date(new Date().toDateString())\n   }\n }\n\n export function showdownMD(md) {\n   return converter.makeHtml(md)\n }\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/index.js",";/*! showdown 06-02-2017 */\r\n(function(){\r\n/**\n * Created by Tivie on 13-07-2015.\n */\n\nfunction getDefaultOpts (simple) {\n  'use strict';\n\n  var defaultOptions = {\n    omitExtraWLInCodeBlocks: {\n      defaultValue: false,\n      describe: 'Omit the default extra whiteline added to code blocks',\n      type: 'boolean'\n    },\n    noHeaderId: {\n      defaultValue: false,\n      describe: 'Turn on/off generated header id',\n      type: 'boolean'\n    },\n    prefixHeaderId: {\n      defaultValue: false,\n      describe: 'Specify a prefix to generated header ids',\n      type: 'string'\n    },\n    ghCompatibleHeaderId: {\n      defaultValue: false,\n      describe: 'Generate header ids compatible with github style (spaces are replaced with dashes, a bunch of non alphanumeric chars are removed)',\n      type: 'boolean'\n    },\n    headerLevelStart: {\n      defaultValue: false,\n      describe: 'The header blocks level start',\n      type: 'integer'\n    },\n    parseImgDimensions: {\n      defaultValue: false,\n      describe: 'Turn on/off image dimension parsing',\n      type: 'boolean'\n    },\n    simplifiedAutoLink: {\n      defaultValue: false,\n      describe: 'Turn on/off GFM autolink style',\n      type: 'boolean'\n    },\n    excludeTrailingPunctuationFromURLs: {\n      defaultValue: false,\n      describe: 'Excludes trailing punctuation from links generated with autoLinking',\n      type: 'boolean'\n    },\n    literalMidWordUnderscores: {\n      defaultValue: false,\n      describe: 'Parse midword underscores as literal underscores',\n      type: 'boolean'\n    },\n    strikethrough: {\n      defaultValue: false,\n      describe: 'Turn on/off strikethrough support',\n      type: 'boolean'\n    },\n    tables: {\n      defaultValue: false,\n      describe: 'Turn on/off tables support',\n      type: 'boolean'\n    },\n    tablesHeaderId: {\n      defaultValue: false,\n      describe: 'Add an id to table headers',\n      type: 'boolean'\n    },\n    ghCodeBlocks: {\n      defaultValue: true,\n      describe: 'Turn on/off GFM fenced code blocks support',\n      type: 'boolean'\n    },\n    tasklists: {\n      defaultValue: false,\n      describe: 'Turn on/off GFM tasklist support',\n      type: 'boolean'\n    },\n    smoothLivePreview: {\n      defaultValue: false,\n      describe: 'Prevents weird effects in live previews due to incomplete input',\n      type: 'boolean'\n    },\n    smartIndentationFix: {\n      defaultValue: false,\n      description: 'Tries to smartly fix indentation in es6 strings',\n      type: 'boolean'\n    },\n    disableForced4SpacesIndentedSublists: {\n      defaultValue: false,\n      description: 'Disables the requirement of indenting nested sublists by 4 spaces',\n      type: 'boolean'\n    },\n    simpleLineBreaks: {\n      defaultValue: false,\n      description: 'Parses simple line breaks as <br> (GFM Style)',\n      type: 'boolean'\n    },\n    requireSpaceBeforeHeadingText: {\n      defaultValue: false,\n      description: 'Makes adding a space between `#` and the header text mandatory (GFM Style)',\n      type: 'boolean'\n    },\n    ghMentions: {\n      defaultValue: false,\n      description: 'Enables github @mentions',\n      type: 'boolean'\n    },\n    ghMentionsLink: {\n      defaultValue: 'https://github.com/{u}',\n      description: 'Changes the link generated by @mentions. Only applies if ghMentions option is enabled.',\n      type: 'string'\n    },\n    encodeEmails: {\n      defaultValue: true,\n      description: 'Encode e-mail addresses through the use of Character Entities, transforming ASCII e-mail addresses into its equivalent decimal entities',\n      type: 'boolean'\n    }\n  };\n  if (simple === false) {\n    return JSON.parse(JSON.stringify(defaultOptions));\n  }\n  var ret = {};\n  for (var opt in defaultOptions) {\n    if (defaultOptions.hasOwnProperty(opt)) {\n      ret[opt] = defaultOptions[opt].defaultValue;\n    }\n  }\n  return ret;\n}\n\nfunction allOptionsOn () {\n  'use strict';\n  var options = getDefaultOpts(true),\n      ret = {};\n  for (var opt in options) {\n    if (options.hasOwnProperty(opt)) {\n      ret[opt] = true;\n    }\n  }\n  return ret;\n}\n\r\n/**\n * Created by Tivie on 06-01-2015.\n */\n\n// Private properties\nvar showdown = {},\n    parsers = {},\n    extensions = {},\n    globalOptions = getDefaultOpts(true),\n    setFlavor = 'vanilla',\n    flavor = {\n      github: {\n        omitExtraWLInCodeBlocks:              true,\n        simplifiedAutoLink:                   true,\n        excludeTrailingPunctuationFromURLs:   true,\n        literalMidWordUnderscores:            true,\n        strikethrough:                        true,\n        tables:                               true,\n        tablesHeaderId:                       true,\n        ghCodeBlocks:                         true,\n        tasklists:                            true,\n        disableForced4SpacesIndentedSublists: true,\n        simpleLineBreaks:                     true,\n        requireSpaceBeforeHeadingText:        true,\n        ghCompatibleHeaderId:                 true,\n        ghMentions:                           true\n      },\n      original: {\n        noHeaderId:                           true,\n        ghCodeBlocks:                         false\n      },\n      ghost: {\n        omitExtraWLInCodeBlocks:              true,\n        parseImgDimensions:                   true,\n        simplifiedAutoLink:                   true,\n        excludeTrailingPunctuationFromURLs:   true,\n        literalMidWordUnderscores:            true,\n        strikethrough:                        true,\n        tables:                               true,\n        tablesHeaderId:                       true,\n        ghCodeBlocks:                         true,\n        tasklists:                            true,\n        smoothLivePreview:                    true,\n        simpleLineBreaks:                     true,\n        requireSpaceBeforeHeadingText:        true,\n        ghMentions:                           false,\n        encodeEmails:                         true\n      },\n      vanilla: getDefaultOpts(true),\n      allOn: allOptionsOn()\n    };\n\n/**\n * helper namespace\n * @type {{}}\n */\nshowdown.helper = {};\n\n/**\n * TODO LEGACY SUPPORT CODE\n * @type {{}}\n */\nshowdown.extensions = {};\n\n/**\n * Set a global option\n * @static\n * @param {string} key\n * @param {*} value\n * @returns {showdown}\n */\nshowdown.setOption = function (key, value) {\n  'use strict';\n  globalOptions[key] = value;\n  return this;\n};\n\n/**\n * Get a global option\n * @static\n * @param {string} key\n * @returns {*}\n */\nshowdown.getOption = function (key) {\n  'use strict';\n  return globalOptions[key];\n};\n\n/**\n * Get the global options\n * @static\n * @returns {{}}\n */\nshowdown.getOptions = function () {\n  'use strict';\n  return globalOptions;\n};\n\n/**\n * Reset global options to the default values\n * @static\n */\nshowdown.resetOptions = function () {\n  'use strict';\n  globalOptions = getDefaultOpts(true);\n};\n\n/**\n * Set the flavor showdown should use as default\n * @param {string} name\n */\nshowdown.setFlavor = function (name) {\n  'use strict';\n  if (!flavor.hasOwnProperty(name)) {\n    throw Error(name + ' flavor was not found');\n  }\n  var preset = flavor[name];\n  setFlavor = name;\n  for (var option in preset) {\n    if (preset.hasOwnProperty(option)) {\n      globalOptions[option] = preset[option];\n    }\n  }\n};\n\n/**\n * Get the currently set flavor\n * @returns {string}\n */\nshowdown.getFlavor = function () {\n  'use strict';\n  return setFlavor;\n};\n\n/**\n * Get the options of a specified flavor. Returns undefined if the flavor was not found\n * @param {string} name Name of the flavor\n * @returns {{}|undefined}\n */\nshowdown.getFlavorOptions = function (name) {\n  'use strict';\n  if (flavor.hasOwnProperty(name)) {\n    return flavor[name];\n  }\n};\n\n/**\n * Get the default options\n * @static\n * @param {boolean} [simple=true]\n * @returns {{}}\n */\nshowdown.getDefaultOptions = function (simple) {\n  'use strict';\n  return getDefaultOpts(simple);\n};\n\n/**\n * Get or set a subParser\n *\n * subParser(name)       - Get a registered subParser\n * subParser(name, func) - Register a subParser\n * @static\n * @param {string} name\n * @param {function} [func]\n * @returns {*}\n */\nshowdown.subParser = function (name, func) {\n  'use strict';\n  if (showdown.helper.isString(name)) {\n    if (typeof func !== 'undefined') {\n      parsers[name] = func;\n    } else {\n      if (parsers.hasOwnProperty(name)) {\n        return parsers[name];\n      } else {\n        throw Error('SubParser named ' + name + ' not registered!');\n      }\n    }\n  }\n};\n\n/**\n * Gets or registers an extension\n * @static\n * @param {string} name\n * @param {object|function=} ext\n * @returns {*}\n */\nshowdown.extension = function (name, ext) {\n  'use strict';\n\n  if (!showdown.helper.isString(name)) {\n    throw Error('Extension \\'name\\' must be a string');\n  }\n\n  name = showdown.helper.stdExtName(name);\n\n  // Getter\n  if (showdown.helper.isUndefined(ext)) {\n    if (!extensions.hasOwnProperty(name)) {\n      throw Error('Extension named ' + name + ' is not registered!');\n    }\n    return extensions[name];\n\n    // Setter\n  } else {\n    // Expand extension if it's wrapped in a function\n    if (typeof ext === 'function') {\n      ext = ext();\n    }\n\n    // Ensure extension is an array\n    if (!showdown.helper.isArray(ext)) {\n      ext = [ext];\n    }\n\n    var validExtension = validate(ext, name);\n\n    if (validExtension.valid) {\n      extensions[name] = ext;\n    } else {\n      throw Error(validExtension.error);\n    }\n  }\n};\n\n/**\n * Gets all extensions registered\n * @returns {{}}\n */\nshowdown.getAllExtensions = function () {\n  'use strict';\n  return extensions;\n};\n\n/**\n * Remove an extension\n * @param {string} name\n */\nshowdown.removeExtension = function (name) {\n  'use strict';\n  delete extensions[name];\n};\n\n/**\n * Removes all extensions\n */\nshowdown.resetExtensions = function () {\n  'use strict';\n  extensions = {};\n};\n\n/**\n * Validate extension\n * @param {array} extension\n * @param {string} name\n * @returns {{valid: boolean, error: string}}\n */\nfunction validate (extension, name) {\n  'use strict';\n\n  var errMsg = (name) ? 'Error in ' + name + ' extension->' : 'Error in unnamed extension',\n      ret = {\n        valid: true,\n        error: ''\n      };\n\n  if (!showdown.helper.isArray(extension)) {\n    extension = [extension];\n  }\n\n  for (var i = 0; i < extension.length; ++i) {\n    var baseMsg = errMsg + ' sub-extension ' + i + ': ',\n        ext = extension[i];\n    if (typeof ext !== 'object') {\n      ret.valid = false;\n      ret.error = baseMsg + 'must be an object, but ' + typeof ext + ' given';\n      return ret;\n    }\n\n    if (!showdown.helper.isString(ext.type)) {\n      ret.valid = false;\n      ret.error = baseMsg + 'property \"type\" must be a string, but ' + typeof ext.type + ' given';\n      return ret;\n    }\n\n    var type = ext.type = ext.type.toLowerCase();\n\n    // normalize extension type\n    if (type === 'language') {\n      type = ext.type = 'lang';\n    }\n\n    if (type === 'html') {\n      type = ext.type = 'output';\n    }\n\n    if (type !== 'lang' && type !== 'output' && type !== 'listener') {\n      ret.valid = false;\n      ret.error = baseMsg + 'type ' + type + ' is not recognized. Valid values: \"lang/language\", \"output/html\" or \"listener\"';\n      return ret;\n    }\n\n    if (type === 'listener') {\n      if (showdown.helper.isUndefined(ext.listeners)) {\n        ret.valid = false;\n        ret.error = baseMsg + '. Extensions of type \"listener\" must have a property called \"listeners\"';\n        return ret;\n      }\n    } else {\n      if (showdown.helper.isUndefined(ext.filter) && showdown.helper.isUndefined(ext.regex)) {\n        ret.valid = false;\n        ret.error = baseMsg + type + ' extensions must define either a \"regex\" property or a \"filter\" method';\n        return ret;\n      }\n    }\n\n    if (ext.listeners) {\n      if (typeof ext.listeners !== 'object') {\n        ret.valid = false;\n        ret.error = baseMsg + '\"listeners\" property must be an object but ' + typeof ext.listeners + ' given';\n        return ret;\n      }\n      for (var ln in ext.listeners) {\n        if (ext.listeners.hasOwnProperty(ln)) {\n          if (typeof ext.listeners[ln] !== 'function') {\n            ret.valid = false;\n            ret.error = baseMsg + '\"listeners\" property must be an hash of [event name]: [callback]. listeners.' + ln +\n              ' must be a function but ' + typeof ext.listeners[ln] + ' given';\n            return ret;\n          }\n        }\n      }\n    }\n\n    if (ext.filter) {\n      if (typeof ext.filter !== 'function') {\n        ret.valid = false;\n        ret.error = baseMsg + '\"filter\" must be a function, but ' + typeof ext.filter + ' given';\n        return ret;\n      }\n    } else if (ext.regex) {\n      if (showdown.helper.isString(ext.regex)) {\n        ext.regex = new RegExp(ext.regex, 'g');\n      }\n      if (!(ext.regex instanceof RegExp)) {\n        ret.valid = false;\n        ret.error = baseMsg + '\"regex\" property must either be a string or a RegExp object, but ' + typeof ext.regex + ' given';\n        return ret;\n      }\n      if (showdown.helper.isUndefined(ext.replace)) {\n        ret.valid = false;\n        ret.error = baseMsg + '\"regex\" extensions must implement a replace string or function';\n        return ret;\n      }\n    }\n  }\n  return ret;\n}\n\n/**\n * Validate extension\n * @param {object} ext\n * @returns {boolean}\n */\nshowdown.validateExtension = function (ext) {\n  'use strict';\n\n  var validateExtension = validate(ext, null);\n  if (!validateExtension.valid) {\n    console.warn(validateExtension.error);\n    return false;\n  }\n  return true;\n};\n\r\n/**\n * showdownjs helper functions\n */\n\nif (!showdown.hasOwnProperty('helper')) {\n  showdown.helper = {};\n}\n\n/**\n * Check if var is string\n * @static\n * @param {string} a\n * @returns {boolean}\n */\nshowdown.helper.isString = function (a) {\n  'use strict';\n  return (typeof a === 'string' || a instanceof String);\n};\n\n/**\n * Check if var is a function\n * @static\n * @param {*} a\n * @returns {boolean}\n */\nshowdown.helper.isFunction = function (a) {\n  'use strict';\n  var getType = {};\n  return a && getType.toString.call(a) === '[object Function]';\n};\n\n/**\n * isArray helper function\n * @static\n * @param {*} a\n * @returns {boolean}\n */\nshowdown.helper.isArray = function (a) {\n  'use strict';\n  return a.constructor === Array;\n};\n\n/**\n * Check if value is undefined\n * @static\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n */\nshowdown.helper.isUndefined = function (value) {\n  'use strict';\n  return typeof value === 'undefined';\n};\n\n/**\n * ForEach helper function\n * Iterates over Arrays and Objects (own properties only)\n * @static\n * @param {*} obj\n * @param {function} callback Accepts 3 params: 1. value, 2. key, 3. the original array/object\n */\nshowdown.helper.forEach = function (obj, callback) {\n  'use strict';\n  // check if obj is defined\n  if (showdown.helper.isUndefined(obj)) {\n    throw new Error('obj param is required');\n  }\n\n  if (showdown.helper.isUndefined(callback)) {\n    throw new Error('callback param is required');\n  }\n\n  if (!showdown.helper.isFunction(callback)) {\n    throw new Error('callback param must be a function/closure');\n  }\n\n  if (typeof obj.forEach === 'function') {\n    obj.forEach(callback);\n  } else if (showdown.helper.isArray(obj)) {\n    for (var i = 0; i < obj.length; i++) {\n      callback(obj[i], i, obj);\n    }\n  } else if (typeof (obj) === 'object') {\n    for (var prop in obj) {\n      if (obj.hasOwnProperty(prop)) {\n        callback(obj[prop], prop, obj);\n      }\n    }\n  } else {\n    throw new Error('obj does not seem to be an array or an iterable object');\n  }\n};\n\n/**\n * Standardidize extension name\n * @static\n * @param {string} s extension name\n * @returns {string}\n */\nshowdown.helper.stdExtName = function (s) {\n  'use strict';\n  return s.replace(/[_?*+\\/\\\\.^-]/g, '').replace(/\\s/g, '').toLowerCase();\n};\n\nfunction escapeCharactersCallback (wholeMatch, m1) {\n  'use strict';\n  var charCodeToEscape = m1.charCodeAt(0);\n  return '¨E' + charCodeToEscape + 'E';\n}\n\n/**\n * Callback used to escape characters when passing through String.replace\n * @static\n * @param {string} wholeMatch\n * @param {string} m1\n * @returns {string}\n */\nshowdown.helper.escapeCharactersCallback = escapeCharactersCallback;\n\n/**\n * Escape characters in a string\n * @static\n * @param {string} text\n * @param {string} charsToEscape\n * @param {boolean} afterBackslash\n * @returns {XML|string|void|*}\n */\nshowdown.helper.escapeCharacters = function (text, charsToEscape, afterBackslash) {\n  'use strict';\n  // First we have to escape the escape characters so that\n  // we can build a character class out of them\n  var regexString = '([' + charsToEscape.replace(/([\\[\\]\\\\])/g, '\\\\$1') + '])';\n\n  if (afterBackslash) {\n    regexString = '\\\\\\\\' + regexString;\n  }\n\n  var regex = new RegExp(regexString, 'g');\n  text = text.replace(regex, escapeCharactersCallback);\n\n  return text;\n};\n\nvar rgxFindMatchPos = function (str, left, right, flags) {\n  'use strict';\n  var f = flags || '',\n      g = f.indexOf('g') > -1,\n      x = new RegExp(left + '|' + right, 'g' + f.replace(/g/g, '')),\n      l = new RegExp(left, f.replace(/g/g, '')),\n      pos = [],\n      t, s, m, start, end;\n\n  do {\n    t = 0;\n    while ((m = x.exec(str))) {\n      if (l.test(m[0])) {\n        if (!(t++)) {\n          s = x.lastIndex;\n          start = s - m[0].length;\n        }\n      } else if (t) {\n        if (!--t) {\n          end = m.index + m[0].length;\n          var obj = {\n            left: {start: start, end: s},\n            match: {start: s, end: m.index},\n            right: {start: m.index, end: end},\n            wholeMatch: {start: start, end: end}\n          };\n          pos.push(obj);\n          if (!g) {\n            return pos;\n          }\n        }\n      }\n    }\n  } while (t && (x.lastIndex = s));\n\n  return pos;\n};\n\n/**\n * matchRecursiveRegExp\n *\n * (c) 2007 Steven Levithan <stevenlevithan.com>\n * MIT License\n *\n * Accepts a string to search, a left and right format delimiter\n * as regex patterns, and optional regex flags. Returns an array\n * of matches, allowing nested instances of left/right delimiters.\n * Use the \"g\" flag to return all matches, otherwise only the\n * first is returned. Be careful to ensure that the left and\n * right format delimiters produce mutually exclusive matches.\n * Backreferences are not supported within the right delimiter\n * due to how it is internally combined with the left delimiter.\n * When matching strings whose format delimiters are unbalanced\n * to the left or right, the output is intentionally as a\n * conventional regex library with recursion support would\n * produce, e.g. \"<<x>\" and \"<x>>\" both produce [\"x\"] when using\n * \"<\" and \">\" as the delimiters (both strings contain a single,\n * balanced instance of \"<x>\").\n *\n * examples:\n * matchRecursiveRegExp(\"test\", \"\\\\(\", \"\\\\)\")\n * returns: []\n * matchRecursiveRegExp(\"<t<<e>><s>>t<>\", \"<\", \">\", \"g\")\n * returns: [\"t<<e>><s>\", \"\"]\n * matchRecursiveRegExp(\"<div id=\\\"x\\\">test</div>\", \"<div\\\\b[^>]*>\", \"</div>\", \"gi\")\n * returns: [\"test\"]\n */\nshowdown.helper.matchRecursiveRegExp = function (str, left, right, flags) {\n  'use strict';\n\n  var matchPos = rgxFindMatchPos (str, left, right, flags),\n      results = [];\n\n  for (var i = 0; i < matchPos.length; ++i) {\n    results.push([\n      str.slice(matchPos[i].wholeMatch.start, matchPos[i].wholeMatch.end),\n      str.slice(matchPos[i].match.start, matchPos[i].match.end),\n      str.slice(matchPos[i].left.start, matchPos[i].left.end),\n      str.slice(matchPos[i].right.start, matchPos[i].right.end)\n    ]);\n  }\n  return results;\n};\n\n/**\n *\n * @param {string} str\n * @param {string|function} replacement\n * @param {string} left\n * @param {string} right\n * @param {string} flags\n * @returns {string}\n */\nshowdown.helper.replaceRecursiveRegExp = function (str, replacement, left, right, flags) {\n  'use strict';\n\n  if (!showdown.helper.isFunction(replacement)) {\n    var repStr = replacement;\n    replacement = function () {\n      return repStr;\n    };\n  }\n\n  var matchPos = rgxFindMatchPos(str, left, right, flags),\n      finalStr = str,\n      lng = matchPos.length;\n\n  if (lng > 0) {\n    var bits = [];\n    if (matchPos[0].wholeMatch.start !== 0) {\n      bits.push(str.slice(0, matchPos[0].wholeMatch.start));\n    }\n    for (var i = 0; i < lng; ++i) {\n      bits.push(\n        replacement(\n          str.slice(matchPos[i].wholeMatch.start, matchPos[i].wholeMatch.end),\n          str.slice(matchPos[i].match.start, matchPos[i].match.end),\n          str.slice(matchPos[i].left.start, matchPos[i].left.end),\n          str.slice(matchPos[i].right.start, matchPos[i].right.end)\n        )\n      );\n      if (i < lng - 1) {\n        bits.push(str.slice(matchPos[i].wholeMatch.end, matchPos[i + 1].wholeMatch.start));\n      }\n    }\n    if (matchPos[lng - 1].wholeMatch.end < str.length) {\n      bits.push(str.slice(matchPos[lng - 1].wholeMatch.end));\n    }\n    finalStr = bits.join('');\n  }\n  return finalStr;\n};\n\n/**\n * Obfuscate an e-mail address through the use of Character Entities,\n * transforming ASCII characters into their equivalent decimal or hex entities.\n *\n * Since it has a random component, subsequent calls to this function produce different results\n *\n * @param {string} mail\n * @returns {string}\n */\nshowdown.helper.encodeEmailAddress = function (mail) {\n  'use strict';\n  var encode = [\n    function (ch) {\n      return '&#' + ch.charCodeAt(0) + ';';\n    },\n    function (ch) {\n      return '&#x' + ch.charCodeAt(0).toString(16) + ';';\n    },\n    function (ch) {\n      return ch;\n    }\n  ];\n\n  mail = mail.replace(/./g, function (ch) {\n    if (ch === '@') {\n      // this *must* be encoded. I insist.\n      ch = encode[Math.floor(Math.random() * 2)](ch);\n    } else {\n      var r = Math.random();\n      // roughly 10% raw, 45% hex, 45% dec\n      ch = (\n        r > 0.9 ? encode[2](ch) : r > 0.45 ? encode[1](ch) : encode[0](ch)\n      );\n    }\n    return ch;\n  });\n\n  return mail;\n};\n\n/**\n * POLYFILLS\n */\n// use this instead of builtin is undefined for IE8 compatibility\nif (typeof(console) === 'undefined') {\n  console = {\n    warn: function (msg) {\n      'use strict';\n      alert(msg);\n    },\n    log: function (msg) {\n      'use strict';\n      alert(msg);\n    },\n    error: function (msg) {\n      'use strict';\n      throw msg;\n    }\n  };\n}\n\n/**\n * Common regexes.\n * We declare some common regexes to improve performance\n */\nshowdown.helper.regexes = {\n  asteriskAndDash: /([*_])/g\n};\n\r\n/**\n * Created by Estevao on 31-05-2015.\n */\n\n/**\n * Showdown Converter class\n * @class\n * @param {object} [converterOptions]\n * @returns {Converter}\n */\nshowdown.Converter = function (converterOptions) {\n  'use strict';\n\n  var\n      /**\n       * Options used by this converter\n       * @private\n       * @type {{}}\n       */\n      options = {},\n\n      /**\n       * Language extensions used by this converter\n       * @private\n       * @type {Array}\n       */\n      langExtensions = [],\n\n      /**\n       * Output modifiers extensions used by this converter\n       * @private\n       * @type {Array}\n       */\n      outputModifiers = [],\n\n      /**\n       * Event listeners\n       * @private\n       * @type {{}}\n       */\n      listeners = {},\n\n      /**\n       * The flavor set in this converter\n       */\n      setConvFlavor = setFlavor;\n\n  _constructor();\n\n  /**\n   * Converter constructor\n   * @private\n   */\n  function _constructor () {\n    converterOptions = converterOptions || {};\n\n    for (var gOpt in globalOptions) {\n      if (globalOptions.hasOwnProperty(gOpt)) {\n        options[gOpt] = globalOptions[gOpt];\n      }\n    }\n\n    // Merge options\n    if (typeof converterOptions === 'object') {\n      for (var opt in converterOptions) {\n        if (converterOptions.hasOwnProperty(opt)) {\n          options[opt] = converterOptions[opt];\n        }\n      }\n    } else {\n      throw Error('Converter expects the passed parameter to be an object, but ' + typeof converterOptions +\n      ' was passed instead.');\n    }\n\n    if (options.extensions) {\n      showdown.helper.forEach(options.extensions, _parseExtension);\n    }\n  }\n\n  /**\n   * Parse extension\n   * @param {*} ext\n   * @param {string} [name='']\n   * @private\n   */\n  function _parseExtension (ext, name) {\n\n    name = name || null;\n    // If it's a string, the extension was previously loaded\n    if (showdown.helper.isString(ext)) {\n      ext = showdown.helper.stdExtName(ext);\n      name = ext;\n\n      // LEGACY_SUPPORT CODE\n      if (showdown.extensions[ext]) {\n        console.warn('DEPRECATION WARNING: ' + ext + ' is an old extension that uses a deprecated loading method.' +\n          'Please inform the developer that the extension should be updated!');\n        legacyExtensionLoading(showdown.extensions[ext], ext);\n        return;\n      // END LEGACY SUPPORT CODE\n\n      } else if (!showdown.helper.isUndefined(extensions[ext])) {\n        ext = extensions[ext];\n\n      } else {\n        throw Error('Extension \"' + ext + '\" could not be loaded. It was either not found or is not a valid extension.');\n      }\n    }\n\n    if (typeof ext === 'function') {\n      ext = ext();\n    }\n\n    if (!showdown.helper.isArray(ext)) {\n      ext = [ext];\n    }\n\n    var validExt = validate(ext, name);\n    if (!validExt.valid) {\n      throw Error(validExt.error);\n    }\n\n    for (var i = 0; i < ext.length; ++i) {\n      switch (ext[i].type) {\n\n        case 'lang':\n          langExtensions.push(ext[i]);\n          break;\n\n        case 'output':\n          outputModifiers.push(ext[i]);\n          break;\n      }\n      if (ext[i].hasOwnProperty('listeners')) {\n        for (var ln in ext[i].listeners) {\n          if (ext[i].listeners.hasOwnProperty(ln)) {\n            listen(ln, ext[i].listeners[ln]);\n          }\n        }\n      }\n    }\n\n  }\n\n  /**\n   * LEGACY_SUPPORT\n   * @param {*} ext\n   * @param {string} name\n   */\n  function legacyExtensionLoading (ext, name) {\n    if (typeof ext === 'function') {\n      ext = ext(new showdown.Converter());\n    }\n    if (!showdown.helper.isArray(ext)) {\n      ext = [ext];\n    }\n    var valid = validate(ext, name);\n\n    if (!valid.valid) {\n      throw Error(valid.error);\n    }\n\n    for (var i = 0; i < ext.length; ++i) {\n      switch (ext[i].type) {\n        case 'lang':\n          langExtensions.push(ext[i]);\n          break;\n        case 'output':\n          outputModifiers.push(ext[i]);\n          break;\n        default:// should never reach here\n          throw Error('Extension loader error: Type unrecognized!!!');\n      }\n    }\n  }\n\n  /**\n   * Listen to an event\n   * @param {string} name\n   * @param {function} callback\n   */\n  function listen (name, callback) {\n    if (!showdown.helper.isString(name)) {\n      throw Error('Invalid argument in converter.listen() method: name must be a string, but ' + typeof name + ' given');\n    }\n\n    if (typeof callback !== 'function') {\n      throw Error('Invalid argument in converter.listen() method: callback must be a function, but ' + typeof callback + ' given');\n    }\n\n    if (!listeners.hasOwnProperty(name)) {\n      listeners[name] = [];\n    }\n    listeners[name].push(callback);\n  }\n\n  function rTrimInputText (text) {\n    var rsp = text.match(/^\\s*/)[0].length,\n        rgx = new RegExp('^\\\\s{0,' + rsp + '}', 'gm');\n    return text.replace(rgx, '');\n  }\n\n  /**\n   * Dispatch an event\n   * @private\n   * @param {string} evtName Event name\n   * @param {string} text Text\n   * @param {{}} options Converter Options\n   * @param {{}} globals\n   * @returns {string}\n   */\n  this._dispatch = function dispatch (evtName, text, options, globals) {\n    if (listeners.hasOwnProperty(evtName)) {\n      for (var ei = 0; ei < listeners[evtName].length; ++ei) {\n        var nText = listeners[evtName][ei](evtName, text, this, options, globals);\n        if (nText && typeof nText !== 'undefined') {\n          text = nText;\n        }\n      }\n    }\n    return text;\n  };\n\n  /**\n   * Listen to an event\n   * @param {string} name\n   * @param {function} callback\n   * @returns {showdown.Converter}\n   */\n  this.listen = function (name, callback) {\n    listen(name, callback);\n    return this;\n  };\n\n  /**\n   * Converts a markdown string into HTML\n   * @param {string} text\n   * @returns {*}\n   */\n  this.makeHtml = function (text) {\n    //check if text is not falsy\n    if (!text) {\n      return text;\n    }\n\n    var globals = {\n      gHtmlBlocks:     [],\n      gHtmlMdBlocks:   [],\n      gHtmlSpans:      [],\n      gUrls:           {},\n      gTitles:         {},\n      gDimensions:     {},\n      gListLevel:      0,\n      hashLinkCounts:  {},\n      langExtensions:  langExtensions,\n      outputModifiers: outputModifiers,\n      converter:       this,\n      ghCodeBlocks:    []\n    };\n\n    // This lets us use ¨ trema as an escape char to avoid md5 hashes\n    // The choice of character is arbitrary; anything that isn't\n    // magic in Markdown will work.\n    text = text.replace(/¨/g, '¨T');\n\n    // Replace $ with ¨D\n    // RegExp interprets $ as a special character\n    // when it's in a replacement string\n    text = text.replace(/\\$/g, '¨D');\n\n    // Standardize line endings\n    text = text.replace(/\\r\\n/g, '\\n'); // DOS to Unix\n    text = text.replace(/\\r/g, '\\n'); // Mac to Unix\n\n    // Stardardize line spaces (nbsp causes trouble in older browsers and some regex flavors)\n    text = text.replace(/\\u00A0/g, ' ');\n\n    if (options.smartIndentationFix) {\n      text = rTrimInputText(text);\n    }\n\n    // Make sure text begins and ends with a couple of newlines:\n    text = '\\n\\n' + text + '\\n\\n';\n\n    // detab\n    text = showdown.subParser('detab')(text, options, globals);\n\n    /**\n     * Strip any lines consisting only of spaces and tabs.\n     * This makes subsequent regexs easier to write, because we can\n     * match consecutive blank lines with /\\n+/ instead of something\n     * contorted like /[ \\t]*\\n+/\n     */\n    text = text.replace(/^[ \\t]+$/mg, '');\n\n    //run languageExtensions\n    showdown.helper.forEach(langExtensions, function (ext) {\n      text = showdown.subParser('runExtension')(ext, text, options, globals);\n    });\n\n    // run the sub parsers\n    text = showdown.subParser('hashPreCodeTags')(text, options, globals);\n    text = showdown.subParser('githubCodeBlocks')(text, options, globals);\n    text = showdown.subParser('hashHTMLBlocks')(text, options, globals);\n    text = showdown.subParser('hashCodeTags')(text, options, globals);\n    text = showdown.subParser('stripLinkDefinitions')(text, options, globals);\n    text = showdown.subParser('blockGamut')(text, options, globals);\n    text = showdown.subParser('unhashHTMLSpans')(text, options, globals);\n    text = showdown.subParser('unescapeSpecialChars')(text, options, globals);\n\n    // attacklab: Restore dollar signs\n    text = text.replace(/¨D/g, '$$');\n\n    // attacklab: Restore tremas\n    text = text.replace(/¨T/g, '¨');\n\n    // Run output modifiers\n    showdown.helper.forEach(outputModifiers, function (ext) {\n      text = showdown.subParser('runExtension')(ext, text, options, globals);\n    });\n\n    return text;\n  };\n\n  /**\n   * Set an option of this Converter instance\n   * @param {string} key\n   * @param {*} value\n   */\n  this.setOption = function (key, value) {\n    options[key] = value;\n  };\n\n  /**\n   * Get the option of this Converter instance\n   * @param {string} key\n   * @returns {*}\n   */\n  this.getOption = function (key) {\n    return options[key];\n  };\n\n  /**\n   * Get the options of this Converter instance\n   * @returns {{}}\n   */\n  this.getOptions = function () {\n    return options;\n  };\n\n  /**\n   * Add extension to THIS converter\n   * @param {{}} extension\n   * @param {string} [name=null]\n   */\n  this.addExtension = function (extension, name) {\n    name = name || null;\n    _parseExtension(extension, name);\n  };\n\n  /**\n   * Use a global registered extension with THIS converter\n   * @param {string} extensionName Name of the previously registered extension\n   */\n  this.useExtension = function (extensionName) {\n    _parseExtension(extensionName);\n  };\n\n  /**\n   * Set the flavor THIS converter should use\n   * @param {string} name\n   */\n  this.setFlavor = function (name) {\n    if (!flavor.hasOwnProperty(name)) {\n      throw Error(name + ' flavor was not found');\n    }\n    var preset = flavor[name];\n    setConvFlavor = name;\n    for (var option in preset) {\n      if (preset.hasOwnProperty(option)) {\n        options[option] = preset[option];\n      }\n    }\n  };\n\n  /**\n   * Get the currently set flavor of this converter\n   * @returns {string}\n   */\n  this.getFlavor = function () {\n    return setConvFlavor;\n  };\n\n  /**\n   * Remove an extension from THIS converter.\n   * Note: This is a costly operation. It's better to initialize a new converter\n   * and specify the extensions you wish to use\n   * @param {Array} extension\n   */\n  this.removeExtension = function (extension) {\n    if (!showdown.helper.isArray(extension)) {\n      extension = [extension];\n    }\n    for (var a = 0; a < extension.length; ++a) {\n      var ext = extension[a];\n      for (var i = 0; i < langExtensions.length; ++i) {\n        if (langExtensions[i] === ext) {\n          langExtensions[i].splice(i, 1);\n        }\n      }\n      for (var ii = 0; ii < outputModifiers.length; ++i) {\n        if (outputModifiers[ii] === ext) {\n          outputModifiers[ii].splice(i, 1);\n        }\n      }\n    }\n  };\n\n  /**\n   * Get all extension of THIS converter\n   * @returns {{language: Array, output: Array}}\n   */\n  this.getAllExtensions = function () {\n    return {\n      language: langExtensions,\n      output: outputModifiers\n    };\n  };\n};\n\r\n/**\n * Turn Markdown link shortcuts into XHTML <a> tags.\n */\nshowdown.subParser('anchors', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('anchors.before', text, options, globals);\n\n  var writeAnchorTag = function (wholeMatch, m1, m2, m3, m4, m5, m6, m7) {\n    if (showdown.helper.isUndefined(m7)) {\n      m7 = '';\n    }\n    wholeMatch = m1;\n    var linkText = m2,\n        linkId = m3.toLowerCase(),\n        url = m4,\n        title = m7;\n\n    if (!url) {\n      if (!linkId) {\n        // lower-case and turn embedded newlines into spaces\n        linkId = linkText.toLowerCase().replace(/ ?\\n/g, ' ');\n      }\n      url = '#' + linkId;\n\n      if (!showdown.helper.isUndefined(globals.gUrls[linkId])) {\n        url = globals.gUrls[linkId];\n        if (!showdown.helper.isUndefined(globals.gTitles[linkId])) {\n          title = globals.gTitles[linkId];\n        }\n      } else {\n        if (wholeMatch.search(/\\(\\s*\\)$/m) > -1) {\n          // Special case for explicit empty url\n          url = '';\n        } else {\n          return wholeMatch;\n        }\n      }\n    }\n\n    //url = showdown.helper.escapeCharacters(url, '*_', false); // replaced line to improve performance\n    url = url.replace(showdown.helper.regexes.asteriskAndDash, showdown.helper.escapeCharactersCallback);\n\n    var result = '<a href=\"' + url + '\"';\n\n    if (title !== '' && title !== null) {\n      title = title.replace(/\"/g, '&quot;');\n      //title = showdown.helper.escapeCharacters(title, '*_', false); // replaced line to improve performance\n      title = title.replace(showdown.helper.regexes.asteriskAndDash, showdown.helper.escapeCharactersCallback);\n      result += ' title=\"' + title + '\"';\n    }\n\n    result += '>' + linkText + '</a>';\n\n    return result;\n  };\n\n  // First, handle reference-style links: [link text] [id]\n  text = text.replace(/(\\[((?:\\[[^\\]]*]|[^\\[\\]])*)][ ]?(?:\\n[ ]*)?\\[(.*?)])()()()()/g, writeAnchorTag);\n\n  // Next, inline-style links: [link text](url \"optional title\")\n  text = text.replace(/(\\[((?:\\[[^\\]]*]|[^\\[\\]])*)]\\([ \\t]*()<?(.*?(?:\\(.*?\\).*?)?)>?[ \\t]*((['\"])(.*?)\\6[ \\t]*)?\\))/g,\n                      writeAnchorTag);\n\n  // handle reference-style shortcuts: [link text]\n  // These must come last in case you've also got [link test][1]\n  // or [link test](/foo)\n  text = text.replace(/(\\[([^\\[\\]]+)])()()()()()/g, writeAnchorTag);\n\n  // Lastly handle GithubMentions if option is enabled\n  if (options.ghMentions) {\n    text = text.replace(/(^|\\s)(\\\\)?(@([a-z\\d\\-]+))(?=[.!?;,[\\]()]|\\s|$)/gmi, function (wm, st, escape, mentions, username) {\n      if (escape === '\\\\') {\n        return st + mentions;\n      }\n\n      //check if options.ghMentionsLink is a string\n      if (!showdown.helper.isString(options.ghMentionsLink)) {\n        throw new Error('ghMentionsLink option must be a string');\n      }\n      var lnk = options.ghMentionsLink.replace(/\\{u}/g, username);\n      return st + '<a href=\"' + lnk + '\">' + mentions + '</a>';\n    });\n  }\n\n  text = globals.converter._dispatch('anchors.after', text, options, globals);\n  return text;\n});\n\r\nshowdown.subParser('autoLinks', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('autoLinks.before', text, options, globals);\n\n  var simpleURLRegex  = /\\b(((https?|ftp|dict):\\/\\/|www\\.)[^'\">\\s]+\\.[^'\">\\s]+)()(?=\\s|$)(?![\"<>])/gi,\n      simpleURLRegex2 = /\\b(((https?|ftp|dict):\\/\\/|www\\.)[^'\">\\s]+\\.[^'\">\\s]+?)([.!?()]?)(?=\\s|$)(?![\"<>])/gi,\n      delimUrlRegex   = /<(((https?|ftp|dict):\\/\\/|www\\.)[^'\">\\s]+)>/gi,\n      simpleMailRegex = /(^|\\s)(?:mailto:)?([A-Za-z0-9!#$%&'*+-/=?^_`{|}~.]+@[-a-z0-9]+(\\.[-a-z0-9]+)*\\.[a-z]+)(?=$|\\s)/gmi,\n      delimMailRegex  = /<()(?:mailto:)?([-.\\w]+@[-a-z0-9]+(\\.[-a-z0-9]+)*\\.[a-z]+)>/gi;\n\n  text = text.replace(delimUrlRegex, replaceLink);\n  text = text.replace(delimMailRegex, replaceMail);\n  // simpleURLRegex  = /\\b(((https?|ftp|dict):\\/\\/|www\\.)[-.+~:?#@!$&'()*,;=[\\]\\w]+)\\b/gi,\n  // Email addresses: <address@domain.foo>\n\n  if (options.simplifiedAutoLink) {\n    if (options.excludeTrailingPunctuationFromURLs) {\n      text = text.replace(simpleURLRegex2, replaceLink);\n    } else {\n      text = text.replace(simpleURLRegex, replaceLink);\n    }\n    text = text.replace(simpleMailRegex, replaceMail);\n  }\n\n  function replaceLink (wm, link, m2, m3, trailingPunctuation) {\n    var lnkTxt = link,\n        append = '';\n    if (/^www\\./i.test(link)) {\n      link = link.replace(/^www\\./i, 'http://www.');\n    }\n    if (options.excludeTrailingPunctuationFromURLs && trailingPunctuation) {\n      append = trailingPunctuation;\n    }\n    return '<a href=\"' + link + '\">' + lnkTxt + '</a>' + append;\n  }\n\n  function replaceMail (wholeMatch, b, mail) {\n    var href = 'mailto:';\n    b = b || '';\n    mail = showdown.subParser('unescapeSpecialChars')(mail, options, globals);\n    if (options.encodeEmails) {\n      href = showdown.helper.encodeEmailAddress(href + mail);\n      mail = showdown.helper.encodeEmailAddress(mail);\n    } else {\n      href = href + mail;\n    }\n    return b + '<a href=\"' + href + '\">' + mail + '</a>';\n  }\n\n  text = globals.converter._dispatch('autoLinks.after', text, options, globals);\n\n  return text;\n});\n\r\n/**\n * These are all the transformations that form block-level\n * tags like paragraphs, headers, and list items.\n */\nshowdown.subParser('blockGamut', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('blockGamut.before', text, options, globals);\n\n  // we parse blockquotes first so that we can have headings and hrs\n  // inside blockquotes\n  text = showdown.subParser('blockQuotes')(text, options, globals);\n  text = showdown.subParser('headers')(text, options, globals);\n\n  // Do Horizontal Rules:\n  text = showdown.subParser('horizontalRule')(text, options, globals);\n\n  text = showdown.subParser('lists')(text, options, globals);\n  text = showdown.subParser('codeBlocks')(text, options, globals);\n  text = showdown.subParser('tables')(text, options, globals);\n\n  // We already ran _HashHTMLBlocks() before, in Markdown(), but that\n  // was to escape raw HTML in the original Markdown source. This time,\n  // we're escaping the markup we've just created, so that we don't wrap\n  // <p> tags around block-level tags.\n  text = showdown.subParser('hashHTMLBlocks')(text, options, globals);\n  text = showdown.subParser('paragraphs')(text, options, globals);\n\n  text = globals.converter._dispatch('blockGamut.after', text, options, globals);\n\n  return text;\n});\n\r\nshowdown.subParser('blockQuotes', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('blockQuotes.before', text, options, globals);\n\n  text = text.replace(/((^ {0,3}>[ \\t]?.+\\n(.+\\n)*\\n*)+)/gm, function (wholeMatch, m1) {\n    var bq = m1;\n\n    // attacklab: hack around Konqueror 3.5.4 bug:\n    // \"----------bug\".replace(/^-/g,\"\") == \"bug\"\n    bq = bq.replace(/^[ \\t]*>[ \\t]?/gm, '¨0'); // trim one level of quoting\n\n    // attacklab: clean up hack\n    bq = bq.replace(/¨0/g, '');\n\n    bq = bq.replace(/^[ \\t]+$/gm, ''); // trim whitespace-only lines\n    bq = showdown.subParser('githubCodeBlocks')(bq, options, globals);\n    bq = showdown.subParser('blockGamut')(bq, options, globals); // recurse\n\n    bq = bq.replace(/(^|\\n)/g, '$1  ');\n    // These leading spaces screw with <pre> content, so we need to fix that:\n    bq = bq.replace(/(\\s*<pre>[^\\r]+?<\\/pre>)/gm, function (wholeMatch, m1) {\n      var pre = m1;\n      // attacklab: hack around Konqueror 3.5.4 bug:\n      pre = pre.replace(/^  /mg, '¨0');\n      pre = pre.replace(/¨0/g, '');\n      return pre;\n    });\n\n    return showdown.subParser('hashBlock')('<blockquote>\\n' + bq + '\\n</blockquote>', options, globals);\n  });\n\n  text = globals.converter._dispatch('blockQuotes.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Process Markdown `<pre><code>` blocks.\n */\nshowdown.subParser('codeBlocks', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('codeBlocks.before', text, options, globals);\n\n  // sentinel workarounds for lack of \\A and \\Z, safari\\khtml bug\n  text += '¨0';\n\n  var pattern = /(?:\\n\\n|^)((?:(?:[ ]{4}|\\t).*\\n+)+)(\\n*[ ]{0,3}[^ \\t\\n]|(?=¨0))/g;\n  text = text.replace(pattern, function (wholeMatch, m1, m2) {\n    var codeblock = m1,\n        nextChar = m2,\n        end = '\\n';\n\n    codeblock = showdown.subParser('outdent')(codeblock, options, globals);\n    codeblock = showdown.subParser('encodeCode')(codeblock, options, globals);\n    codeblock = showdown.subParser('detab')(codeblock, options, globals);\n    codeblock = codeblock.replace(/^\\n+/g, ''); // trim leading newlines\n    codeblock = codeblock.replace(/\\n+$/g, ''); // trim trailing newlines\n\n    if (options.omitExtraWLInCodeBlocks) {\n      end = '';\n    }\n\n    codeblock = '<pre><code>' + codeblock + end + '</code></pre>';\n\n    return showdown.subParser('hashBlock')(codeblock, options, globals) + nextChar;\n  });\n\n  // strip sentinel\n  text = text.replace(/¨0/, '');\n\n  text = globals.converter._dispatch('codeBlocks.after', text, options, globals);\n  return text;\n});\n\r\n/**\n *\n *   *  Backtick quotes are used for <code></code> spans.\n *\n *   *  You can use multiple backticks as the delimiters if you want to\n *     include literal backticks in the code span. So, this input:\n *\n *         Just type ``foo `bar` baz`` at the prompt.\n *\n *       Will translate to:\n *\n *         <p>Just type <code>foo `bar` baz</code> at the prompt.</p>\n *\n *    There's no arbitrary limit to the number of backticks you\n *    can use as delimters. If you need three consecutive backticks\n *    in your code, use four for delimiters, etc.\n *\n *  *  You can use spaces to get literal backticks at the edges:\n *\n *         ... type `` `bar` `` ...\n *\n *       Turns to:\n *\n *         ... type <code>`bar`</code> ...\n */\nshowdown.subParser('codeSpans', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('codeSpans.before', text, options, globals);\n\n  if (typeof(text) === 'undefined') {\n    text = '';\n  }\n  text = text.replace(/(^|[^\\\\])(`+)([^\\r]*?[^`])\\2(?!`)/gm,\n    function (wholeMatch, m1, m2, m3) {\n      var c = m3;\n      c = c.replace(/^([ \\t]*)/g, '');\t// leading whitespace\n      c = c.replace(/[ \\t]*$/g, '');\t// trailing whitespace\n      c = showdown.subParser('encodeCode')(c, options, globals);\n      return m1 + '<code>' + c + '</code>';\n    }\n  );\n\n  text = globals.converter._dispatch('codeSpans.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Convert all tabs to spaces\n */\nshowdown.subParser('detab', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('detab.before', text, options, globals);\n\n  // expand first n-1 tabs\n  text = text.replace(/\\t(?=\\t)/g, '    '); // g_tab_width\n\n  // replace the nth with two sentinels\n  text = text.replace(/\\t/g, '¨A¨B');\n\n  // use the sentinel to anchor our regex so it doesn't explode\n  text = text.replace(/¨B(.+?)¨A/g, function (wholeMatch, m1) {\n    var leadingText = m1,\n        numSpaces = 4 - leadingText.length % 4;  // g_tab_width\n\n    // there *must* be a better way to do this:\n    for (var i = 0; i < numSpaces; i++) {\n      leadingText += ' ';\n    }\n\n    return leadingText;\n  });\n\n  // clean up sentinels\n  text = text.replace(/¨A/g, '    ');  // g_tab_width\n  text = text.replace(/¨B/g, '');\n\n  text = globals.converter._dispatch('detab.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Smart processing for ampersands and angle brackets that need to be encoded.\n */\nshowdown.subParser('encodeAmpsAndAngles', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('encodeAmpsAndAngles.before', text, options, globals);\n\n  // Ampersand-encoding based entirely on Nat Irons's Amputator MT plugin:\n  // http://bumppo.net/projects/amputator/\n  text = text.replace(/&(?!#?[xX]?(?:[0-9a-fA-F]+|\\w+);)/g, '&amp;');\n\n  // Encode naked <'s\n  text = text.replace(/<(?![a-z\\/?$!])/gi, '&lt;');\n\n  // Encode <\n  text = text.replace(/</g, '&lt;');\n\n  // Encode >\n  text = text.replace(/>/g, '&gt;');\n\n  text = globals.converter._dispatch('encodeAmpsAndAngles.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Returns the string, with after processing the following backslash escape sequences.\n *\n * attacklab: The polite way to do this is with the new escapeCharacters() function:\n *\n *    text = escapeCharacters(text,\"\\\\\",true);\n *    text = escapeCharacters(text,\"`*_{}[]()>#+-.!\",true);\n *\n * ...but we're sidestepping its use of the (slow) RegExp constructor\n * as an optimization for Firefox.  This function gets called a LOT.\n */\nshowdown.subParser('encodeBackslashEscapes', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('encodeBackslashEscapes.before', text, options, globals);\n\n  text = text.replace(/\\\\(\\\\)/g, showdown.helper.escapeCharactersCallback);\n  text = text.replace(/\\\\([`*_{}\\[\\]()>#+.!~=-])/g, showdown.helper.escapeCharactersCallback);\n\n  text = globals.converter._dispatch('encodeBackslashEscapes.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Encode/escape certain characters inside Markdown code runs.\n * The point is that in code, these characters are literals,\n * and lose their special Markdown meanings.\n */\nshowdown.subParser('encodeCode', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('encodeCode.before', text, options, globals);\n\n  // Encode all ampersands; HTML entities are not\n  // entities within a Markdown code span.\n  text = text\n    .replace(/&/g, '&amp;')\n  // Do the angle bracket song and dance:\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n  // Now, escape characters that are magic in Markdown:\n    .replace(/([*_{}\\[\\]\\\\=~-])/g, showdown.helper.escapeCharactersCallback);\n\n  text = globals.converter._dispatch('encodeCode.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Within tags -- meaning between < and > -- encode [\\ ` * _ ~ =] so they\n * don't conflict with their use in Markdown for code, italics and strong.\n */\nshowdown.subParser('escapeSpecialCharsWithinTagAttributes', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('escapeSpecialCharsWithinTagAttributes.before', text, options, globals);\n\n  // Build a regex to find HTML tags and comments.  See Friedl's\n  // \"Mastering Regular Expressions\", 2nd Ed., pp. 200-201.\n  var regex = /(<[a-z\\/!$](\"[^\"]*\"|'[^']*'|[^'\">])*>|<!(--.*?--\\s*)+>)/gi;\n\n  text = text.replace(regex, function (wholeMatch) {\n    return wholeMatch\n      .replace(/(.)<\\/?code>(?=.)/g, '$1`')\n      .replace(/([\\\\`*_~=])/g, showdown.helper.escapeCharactersCallback);\n  });\n\n  text = globals.converter._dispatch('escapeSpecialCharsWithinTagAttributes.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Handle github codeblocks prior to running HashHTML so that\n * HTML contained within the codeblock gets escaped properly\n * Example:\n * ```ruby\n *     def hello_world(x)\n *       puts \"Hello, #{x}\"\n *     end\n * ```\n */\nshowdown.subParser('githubCodeBlocks', function (text, options, globals) {\n  'use strict';\n\n  // early exit if option is not enabled\n  if (!options.ghCodeBlocks) {\n    return text;\n  }\n\n  text = globals.converter._dispatch('githubCodeBlocks.before', text, options, globals);\n\n  text += '¨0';\n\n  text = text.replace(/(?:^|\\n)```(.*)\\n([\\s\\S]*?)\\n```/g, function (wholeMatch, language, codeblock) {\n    var end = (options.omitExtraWLInCodeBlocks) ? '' : '\\n';\n\n    // First parse the github code block\n    codeblock = showdown.subParser('encodeCode')(codeblock, options, globals);\n    codeblock = showdown.subParser('detab')(codeblock, options, globals);\n    codeblock = codeblock.replace(/^\\n+/g, ''); // trim leading newlines\n    codeblock = codeblock.replace(/\\n+$/g, ''); // trim trailing whitespace\n\n    codeblock = '<pre><code' + (language ? ' class=\"' + language + ' language-' + language + '\"' : '') + '>' + codeblock + end + '</code></pre>';\n\n    codeblock = showdown.subParser('hashBlock')(codeblock, options, globals);\n\n    // Since GHCodeblocks can be false positives, we need to\n    // store the primitive text and the parsed text in a global var,\n    // and then return a token\n    return '\\n\\n¨G' + (globals.ghCodeBlocks.push({text: wholeMatch, codeblock: codeblock}) - 1) + 'G\\n\\n';\n  });\n\n  // attacklab: strip sentinel\n  text = text.replace(/¨0/, '');\n\n  return globals.converter._dispatch('githubCodeBlocks.after', text, options, globals);\n});\n\r\nshowdown.subParser('hashBlock', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('hashBlock.before', text, options, globals);\n  text = text.replace(/(^\\n+|\\n+$)/g, '');\n  text = '\\n\\n¨K' + (globals.gHtmlBlocks.push(text) - 1) + 'K\\n\\n';\n  text = globals.converter._dispatch('hashBlock.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Hash and escape <code> elements that should not be parsed as markdown\n */\nshowdown.subParser('hashCodeTags', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('hashCodeTags.before', text, options, globals);\n\n  var repFunc = function (wholeMatch, match, left, right) {\n    var codeblock = left + showdown.subParser('encodeCode')(match, options, globals) + right;\n    return '¨C' + (globals.gHtmlSpans.push(codeblock) - 1) + 'C';\n  };\n\n  // Hash naked <code>\n  text = showdown.helper.replaceRecursiveRegExp(text, repFunc, '<code\\\\b[^>]*>', '</code>', 'gim');\n\n  text = globals.converter._dispatch('hashCodeTags.after', text, options, globals);\n  return text;\n});\n\r\nshowdown.subParser('hashElement', function (text, options, globals) {\n  'use strict';\n\n  return function (wholeMatch, m1) {\n    var blockText = m1;\n\n    // Undo double lines\n    blockText = blockText.replace(/\\n\\n/g, '\\n');\n    blockText = blockText.replace(/^\\n/, '');\n\n    // strip trailing blank lines\n    blockText = blockText.replace(/\\n+$/g, '');\n\n    // Replace the element text with a marker (\"¨KxK\" where x is its key)\n    blockText = '\\n\\n¨K' + (globals.gHtmlBlocks.push(blockText) - 1) + 'K\\n\\n';\n\n    return blockText;\n  };\n});\n\r\nshowdown.subParser('hashHTMLBlocks', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('hashHTMLBlocks.before', text, options, globals);\n\n  var blockTags = [\n        'pre',\n        'div',\n        'h1',\n        'h2',\n        'h3',\n        'h4',\n        'h5',\n        'h6',\n        'blockquote',\n        'table',\n        'dl',\n        'ol',\n        'ul',\n        'script',\n        'noscript',\n        'form',\n        'fieldset',\n        'iframe',\n        'math',\n        'style',\n        'section',\n        'header',\n        'footer',\n        'nav',\n        'article',\n        'aside',\n        'address',\n        'audio',\n        'canvas',\n        'figure',\n        'hgroup',\n        'output',\n        'video',\n        'p'\n      ],\n      repFunc = function (wholeMatch, match, left, right) {\n        var txt = wholeMatch;\n        // check if this html element is marked as markdown\n        // if so, it's contents should be parsed as markdown\n        if (left.search(/\\bmarkdown\\b/) !== -1) {\n          txt = left + globals.converter.makeHtml(match) + right;\n        }\n        return '\\n\\n¨K' + (globals.gHtmlBlocks.push(txt) - 1) + 'K\\n\\n';\n      };\n\n  for (var i = 0; i < blockTags.length; ++i) {\n    text = showdown.helper.replaceRecursiveRegExp(text, repFunc, '^ {0,3}<' + blockTags[i] + '\\\\b[^>]*>', '</' + blockTags[i] + '>', 'gim');\n  }\n\n  // HR SPECIAL CASE\n  text = text.replace(/(\\n {0,3}(<(hr)\\b([^<>])*?\\/?>)[ \\t]*(?=\\n{2,}))/g,\n    showdown.subParser('hashElement')(text, options, globals));\n\n  // Special case for standalone HTML comments\n  text = showdown.helper.replaceRecursiveRegExp(text, function (txt) {\n    return '\\n\\n¨K' + (globals.gHtmlBlocks.push(txt) - 1) + 'K\\n\\n';\n  }, '^ {0,3}<!--', '-->', 'gm');\n\n  // PHP and ASP-style processor instructions (<?...?> and <%...%>)\n  text = text.replace(/(?:\\n\\n)( {0,3}(?:<([?%])[^\\r]*?\\2>)[ \\t]*(?=\\n{2,}))/g,\n    showdown.subParser('hashElement')(text, options, globals));\n\n  text = globals.converter._dispatch('hashHTMLBlocks.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Hash span elements that should not be parsed as markdown\n */\nshowdown.subParser('hashHTMLSpans', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('hashHTMLSpans.before', text, options, globals);\n\n  function hashHTMLSpan (html) {\n    return '¨C' + (globals.gHtmlSpans.push(html) - 1) + 'C';\n  }\n\n  // Hash Self Closing tags\n  text = text.replace(/<[^>]+?\\/>/gi, function (wm) {\n    return hashHTMLSpan(wm);\n  });\n\n  // Hash tags without properties\n  text = text.replace(/<([^>]+?)>[\\s\\S]*?<\\/\\1>/g, function (wm) {\n    return hashHTMLSpan(wm);\n  });\n\n  // Hash tags with properties\n  text = text.replace(/<([^>]+?)\\s[^>]+?>[\\s\\S]*?<\\/\\1>/g, function (wm) {\n    return hashHTMLSpan(wm);\n  });\n\n  // Hash self closing tags without />\n  text = text.replace(/<[^>]+?>/gi, function (wm) {\n    return hashHTMLSpan(wm);\n  });\n\n  /*showdown.helper.matchRecursiveRegExp(text, '<code\\\\b[^>]*>', '</code>', 'gi');*/\n\n  text = globals.converter._dispatch('hashHTMLSpans.after', text, options, globals);\n  return text;\n});\n\n/**\n * Unhash HTML spans\n */\nshowdown.subParser('unhashHTMLSpans', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('unhashHTMLSpans.before', text, options, globals);\n\n  for (var i = 0; i < globals.gHtmlSpans.length; ++i) {\n    var repText = globals.gHtmlSpans[i],\n        // limiter to prevent infinite loop (assume 10 as limit for recurse)\n        limit = 0;\n\n    while (/¨C(\\d+)C/.test(repText)) {\n      var num = RegExp.$1;\n      repText = repText.replace('¨C' + num + 'C', globals.gHtmlSpans[num]);\n      if (limit === 10) {\n        break;\n      }\n      ++limit;\n    }\n    text = text.replace('¨C' + i + 'C', repText);\n  }\n\n  text = globals.converter._dispatch('unhashHTMLSpans.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Hash and escape <pre><code> elements that should not be parsed as markdown\n */\nshowdown.subParser('hashPreCodeTags', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('hashPreCodeTags.before', text, options, globals);\n\n  var repFunc = function (wholeMatch, match, left, right) {\n    // encode html entities\n    var codeblock = left + showdown.subParser('encodeCode')(match, options, globals) + right;\n    return '\\n\\n¨G' + (globals.ghCodeBlocks.push({text: wholeMatch, codeblock: codeblock}) - 1) + 'G\\n\\n';\n  };\n\n  // Hash <pre><code>\n  text = showdown.helper.replaceRecursiveRegExp(text, repFunc, '^ {0,3}<pre\\\\b[^>]*>\\\\s*<code\\\\b[^>]*>', '^ {0,3}</code>\\\\s*</pre>', 'gim');\n\n  text = globals.converter._dispatch('hashPreCodeTags.after', text, options, globals);\n  return text;\n});\n\r\nshowdown.subParser('headers', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('headers.before', text, options, globals);\n\n  var headerLevelStart = (isNaN(parseInt(options.headerLevelStart))) ? 1 : parseInt(options.headerLevelStart),\n      ghHeaderId = options.ghCompatibleHeaderId,\n\n  // Set text-style headers:\n  //\tHeader 1\n  //\t========\n  //\n  //\tHeader 2\n  //\t--------\n  //\n      setextRegexH1 = (options.smoothLivePreview) ? /^(.+)[ \\t]*\\n={2,}[ \\t]*\\n+/gm : /^(.+)[ \\t]*\\n=+[ \\t]*\\n+/gm,\n      setextRegexH2 = (options.smoothLivePreview) ? /^(.+)[ \\t]*\\n-{2,}[ \\t]*\\n+/gm : /^(.+)[ \\t]*\\n-+[ \\t]*\\n+/gm;\n\n  text = text.replace(setextRegexH1, function (wholeMatch, m1) {\n\n    var spanGamut = showdown.subParser('spanGamut')(m1, options, globals),\n        hID = (options.noHeaderId) ? '' : ' id=\"' + headerId(m1) + '\"',\n        hLevel = headerLevelStart,\n        hashBlock = '<h' + hLevel + hID + '>' + spanGamut + '</h' + hLevel + '>';\n    return showdown.subParser('hashBlock')(hashBlock, options, globals);\n  });\n\n  text = text.replace(setextRegexH2, function (matchFound, m1) {\n    var spanGamut = showdown.subParser('spanGamut')(m1, options, globals),\n        hID = (options.noHeaderId) ? '' : ' id=\"' + headerId(m1) + '\"',\n        hLevel = headerLevelStart + 1,\n        hashBlock = '<h' + hLevel + hID + '>' + spanGamut + '</h' + hLevel + '>';\n    return showdown.subParser('hashBlock')(hashBlock, options, globals);\n  });\n\n  // atx-style headers:\n  //  # Header 1\n  //  ## Header 2\n  //  ## Header 2 with closing hashes ##\n  //  ...\n  //  ###### Header 6\n  //\n  var atxStyle = (options.requireSpaceBeforeHeadingText) ? /^(#{1,6})[ \\t]+(.+?)[ \\t]*#*\\n+/gm : /^(#{1,6})[ \\t]*(.+?)[ \\t]*#*\\n+/gm;\n\n  text = text.replace(atxStyle, function (wholeMatch, m1, m2) {\n    var span = showdown.subParser('spanGamut')(m2, options, globals),\n        hID = (options.noHeaderId) ? '' : ' id=\"' + headerId(m2) + '\"',\n        hLevel = headerLevelStart - 1 + m1.length,\n        header = '<h' + hLevel + hID + '>' + span + '</h' + hLevel + '>';\n\n    return showdown.subParser('hashBlock')(header, options, globals);\n  });\n\n  function headerId (m) {\n    var title;\n    // Prefix id to prevent causing inadvertent pre-existing style matches.\n    if (showdown.helper.isString(options.prefixHeaderId)) {\n      title = options.prefixHeaderId + m;\n    } else if (options.prefixHeaderId === true) {\n      title = 'section ' + m;\n    } else {\n      title = m;\n    }\n\n    if (ghHeaderId) {\n      title = title\n        .replace(/ /g, '-')\n        // replace previously escaped chars (&, ¨ and $)\n        .replace(/&amp;/g, '')\n        .replace(/¨T/g, '')\n        .replace(/¨D/g, '')\n        // replace rest of the chars (&~$ are repeated as they might have been escaped)\n        // borrowed from github's redcarpet (some they should produce similar results)\n        .replace(/[&+$,\\/:;=?@\"#{}|^¨~\\[\\]`\\\\*)(%.!'<>]/g, '')\n        .toLowerCase();\n    } else {\n      title = title\n        .replace(/[^\\w]/g, '')\n        .toLowerCase();\n    }\n\n    if (globals.hashLinkCounts[title]) {\n      title = title + '-' + (globals.hashLinkCounts[title]++);\n    } else {\n      globals.hashLinkCounts[title] = 1;\n    }\n    return title;\n  }\n\n  text = globals.converter._dispatch('headers.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Turn Markdown link shortcuts into XHTML <a> tags.\n */\nshowdown.subParser('horizontalRule', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('horizontalRule.before', text, options, globals);\n\n  var key = showdown.subParser('hashBlock')('<hr />', options, globals);\n  text = text.replace(/^ {0,2}( ?-){3,}[ \\t]*$/gm, key);\n  text = text.replace(/^ {0,2}( ?\\*){3,}[ \\t]*$/gm, key);\n  text = text.replace(/^ {0,2}( ?_){3,}[ \\t]*$/gm, key);\n\n  text = globals.converter._dispatch('horizontalRule.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Turn Markdown image shortcuts into <img> tags.\n */\nshowdown.subParser('images', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('images.before', text, options, globals);\n\n  var inlineRegExp    = /!\\[(.*?)]\\s?\\([ \\t]*()<?(\\S+?)>?(?: =([*\\d]+[A-Za-z%]{0,4})x([*\\d]+[A-Za-z%]{0,4}))?[ \\t]*(?:(['\"])(.*?)\\6[ \\t]*)?\\)/g,\n      referenceRegExp = /!\\[([^\\]]*?)] ?(?:\\n *)?\\[(.*?)]()()()()()/g;\n\n  function writeImageTag (wholeMatch, altText, linkId, url, width, height, m5, title) {\n\n    var gUrls   = globals.gUrls,\n        gTitles = globals.gTitles,\n        gDims   = globals.gDimensions;\n\n    linkId = linkId.toLowerCase();\n\n    if (!title) {\n      title = '';\n    }\n\n    if (url === '' || url === null) {\n      if (linkId === '' || linkId === null) {\n        // lower-case and turn embedded newlines into spaces\n        linkId = altText.toLowerCase().replace(/ ?\\n/g, ' ');\n      }\n      url = '#' + linkId;\n\n      if (!showdown.helper.isUndefined(gUrls[linkId])) {\n        url = gUrls[linkId];\n        if (!showdown.helper.isUndefined(gTitles[linkId])) {\n          title = gTitles[linkId];\n        }\n        if (!showdown.helper.isUndefined(gDims[linkId])) {\n          width = gDims[linkId].width;\n          height = gDims[linkId].height;\n        }\n      } else {\n        return wholeMatch;\n      }\n    }\n\n    altText = altText\n      .replace(/\"/g, '&quot;')\n    //altText = showdown.helper.escapeCharacters(altText, '*_', false);\n      .replace(showdown.helper.regexes.asteriskAndDash, showdown.helper.escapeCharactersCallback);\n    //url = showdown.helper.escapeCharacters(url, '*_', false);\n    url = url.replace(showdown.helper.regexes.asteriskAndDash, showdown.helper.escapeCharactersCallback);\n    var result = '<img src=\"' + url + '\" alt=\"' + altText + '\"';\n\n    if (title) {\n      title = title\n        .replace(/\"/g, '&quot;')\n      //title = showdown.helper.escapeCharacters(title, '*_', false);\n        .replace(showdown.helper.regexes.asteriskAndDash, showdown.helper.escapeCharactersCallback);\n      result += ' title=\"' + title + '\"';\n    }\n\n    if (width && height) {\n      width  = (width === '*') ? 'auto' : width;\n      height = (height === '*') ? 'auto' : height;\n\n      result += ' width=\"' + width + '\"';\n      result += ' height=\"' + height + '\"';\n    }\n\n    result += ' />';\n\n    return result;\n  }\n\n  // First, handle reference-style labeled images: ![alt text][id]\n  text = text.replace(referenceRegExp, writeImageTag);\n\n  // Next, handle inline images:  ![alt text](url =<width>x<height> \"optional title\")\n  text = text.replace(inlineRegExp, writeImageTag);\n\n  text = globals.converter._dispatch('images.after', text, options, globals);\n  return text;\n});\n\r\nshowdown.subParser('italicsAndBold', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('italicsAndBold.before', text, options, globals);\n\n  // it's faster to have 3 separate regexes for each case than have just one\n  // because of backtracing, in some cases, it could lead to an exponential effect\n  // called \"catastrophic backtrace\". Ominous!\n\n  // Parse underscores\n  if (options.literalMidWordUnderscores) {\n    text = text.replace(/\\b___(\\S[\\s\\S]*)___\\b/g, '<strong><em>$1</em></strong>');\n    text = text.replace(/\\b__(\\S[\\s\\S]*)__\\b/g, '<strong>$1</strong>');\n    text = text.replace(/\\b_(\\S[\\s\\S]*?)_\\b/g, '<em>$1</em>');\n  } else {\n    text = text.replace(/___(\\S[\\s\\S]*?)___/g, function (wm, m) {\n      return (/\\S$/.test(m)) ? '<strong><em>' + m + '</em></strong>' : wm;\n    });\n    text = text.replace(/__(\\S[\\s\\S]*?)__/g, function (wm, m) {\n      return (/\\S$/.test(m)) ? '<strong>' + m + '</strong>' : wm;\n    });\n    text = text.replace(/_([^\\s_][\\s\\S]*?)_/g, function (wm, m) {\n      // !/^_[^_]/.test(m) - test if it doesn't start with __ (since it seems redundant, we removed it)\n      return (/\\S$/.test(m)) ? '<em>' + m + '</em>' : wm;\n    });\n  }\n\n  // Now parse asterisks\n  text = text.replace(/\\*\\*\\*(\\S[\\s\\S]*?)\\*\\*\\*/g, function (wm, m) {\n    return (/\\S$/.test(m)) ? '<strong><em>' + m + '</em></strong>' : wm;\n  });\n  text = text.replace(/\\*\\*(\\S[\\s\\S]*?)\\*\\*/g, function (wm, m) {\n    return (/\\S$/.test(m)) ? '<strong>' + m + '</strong>' : wm;\n  });\n  text = text.replace(/\\*([^\\s*][\\s\\S]*?)\\*/g, function (wm, m) {\n    // !/^\\*[^*]/.test(m) - test if it doesn't start with ** (since it seems redundant, we removed it)\n    return (/\\S$/.test(m)) ? '<em>' + m + '</em>' : wm;\n  });\n\n  text = globals.converter._dispatch('italicsAndBold.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Form HTML ordered (numbered) and unordered (bulleted) lists.\n */\nshowdown.subParser('lists', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('lists.before', text, options, globals);\n\n  /**\n   * Process the contents of a single ordered or unordered list, splitting it\n   * into individual list items.\n   * @param {string} listStr\n   * @param {boolean} trimTrailing\n   * @returns {string}\n   */\n  function processListItems (listStr, trimTrailing) {\n    // The $g_list_level global keeps track of when we're inside a list.\n    // Each time we enter a list, we increment it; when we leave a list,\n    // we decrement. If it's zero, we're not in a list anymore.\n    //\n    // We do this because when we're not inside a list, we want to treat\n    // something like this:\n    //\n    //    I recommend upgrading to version\n    //    8. Oops, now this line is treated\n    //    as a sub-list.\n    //\n    // As a single paragraph, despite the fact that the second line starts\n    // with a digit-period-space sequence.\n    //\n    // Whereas when we're inside a list (or sub-list), that line will be\n    // treated as the start of a sub-list. What a kludge, huh? This is\n    // an aspect of Markdown's syntax that's hard to parse perfectly\n    // without resorting to mind-reading. Perhaps the solution is to\n    // change the syntax rules such that sub-lists must start with a\n    // starting cardinal number; e.g. \"1.\" or \"a.\".\n    globals.gListLevel++;\n\n    // trim trailing blank lines:\n    listStr = listStr.replace(/\\n{2,}$/, '\\n');\n\n    // attacklab: add sentinel to emulate \\z\n    listStr += '¨0';\n\n    var rgx = /(\\n)?(^ {0,3})([*+-]|\\d+[.])[ \\t]+((\\[(x|X| )?])?[ \\t]*[^\\r]+?(\\n{1,2}))(?=\\n*(¨0| {0,3}([*+-]|\\d+[.])[ \\t]+))/gm,\n        isParagraphed = (/\\n[ \\t]*\\n(?!¨0)/.test(listStr));\n\n    // Since version 1.5, nesting sublists requires 4 spaces (or 1 tab) indentation,\n    // which is a syntax breaking change\n    // activating this option reverts to old behavior\n    if (options.disableForced4SpacesIndentedSublists) {\n      rgx = /(\\n)?(^ {0,3})([*+-]|\\d+[.])[ \\t]+((\\[(x|X| )?])?[ \\t]*[^\\r]+?(\\n{1,2}))(?=\\n*(¨0|\\2([*+-]|\\d+[.])[ \\t]+))/gm;\n    }\n\n    listStr = listStr.replace(rgx, function (wholeMatch, m1, m2, m3, m4, taskbtn, checked) {\n      checked = (checked && checked.trim() !== '');\n\n      var item = showdown.subParser('outdent')(m4, options, globals),\n          bulletStyle = '';\n\n      // Support for github tasklists\n      if (taskbtn && options.tasklists) {\n        bulletStyle = ' class=\"task-list-item\" style=\"list-style-type: none;\"';\n        item = item.replace(/^[ \\t]*\\[(x|X| )?]/m, function () {\n          var otp = '<input type=\"checkbox\" disabled style=\"margin: 0px 0.35em 0.25em -1.6em; vertical-align: middle;\"';\n          if (checked) {\n            otp += ' checked';\n          }\n          otp += '>';\n          return otp;\n        });\n      }\n\n      // ISSUE #312\n      // This input: - - - a\n      // causes trouble to the parser, since it interprets it as:\n      // <ul><li><li><li>a</li></li></li></ul>\n      // instead of:\n      // <ul><li>- - a</li></ul>\n      // So, to prevent it, we will put a marker (¨A)in the beginning of the line\n      // Kind of hackish/monkey patching, but seems more effective than overcomplicating the list parser\n      item = item.replace(/^([-*+]|\\d\\.)[ \\t]+[\\S\\n ]*/g, function (wm2) {\n        return '¨A' + wm2;\n      });\n\n      // m1 - Leading line or\n      // Has a double return (multi paragraph) or\n      // Has sublist\n      if (m1 || (item.search(/\\n{2,}/) > -1)) {\n        item = showdown.subParser('githubCodeBlocks')(item, options, globals);\n        item = showdown.subParser('blockGamut')(item, options, globals);\n      } else {\n        // Recursion for sub-lists:\n        item = showdown.subParser('lists')(item, options, globals);\n        item = item.replace(/\\n$/, ''); // chomp(item)\n        item = showdown.subParser('hashHTMLBlocks')(item, options, globals);\n        // Colapse double linebreaks\n        item = item.replace(/\\n\\n+/g, '\\n\\n');\n        // replace double linebreaks with a placeholder\n        item = item.replace(/\\n\\n/g, '¨B');\n        if (isParagraphed) {\n          item = showdown.subParser('paragraphs')(item, options, globals);\n        } else {\n          item = showdown.subParser('spanGamut')(item, options, globals);\n        }\n        item = item.replace(/¨B/g, '\\n\\n');\n      }\n\n      // now we need to remove the marker (¨A)\n      item = item.replace('¨A', '');\n      // we can finally wrap the line in list item tags\n      item =  '<li' + bulletStyle + '>' + item + '</li>\\n';\n\n      return item;\n    });\n\n    // attacklab: strip sentinel\n    listStr = listStr.replace(/¨0/g, '');\n\n    globals.gListLevel--;\n\n    if (trimTrailing) {\n      listStr = listStr.replace(/\\s+$/, '');\n    }\n\n    return listStr;\n  }\n\n  /**\n   * Check and parse consecutive lists (better fix for issue #142)\n   * @param {string} list\n   * @param {string} listType\n   * @param {boolean} trimTrailing\n   * @returns {string}\n   */\n  function parseConsecutiveLists (list, listType, trimTrailing) {\n    // check if we caught 2 or more consecutive lists by mistake\n    // we use the counterRgx, meaning if listType is UL we look for OL and vice versa\n    var olRgx = (options.disableForced4SpacesIndentedSublists) ? /^ ?\\d+\\.[ \\t]/gm : /^ {0,3}\\d+\\.[ \\t]/gm,\n        ulRgx = (options.disableForced4SpacesIndentedSublists) ? /^ ?[*+-][ \\t]/gm : /^ {0,3}[*+-][ \\t]/gm,\n        counterRxg = (listType === 'ul') ? olRgx : ulRgx,\n        result = '';\n\n    if (list.search(counterRxg) !== -1) {\n      (function parseCL (txt) {\n        var pos = txt.search(counterRxg);\n        if (pos !== -1) {\n          // slice\n          result += '\\n<' + listType + '>\\n' + processListItems(txt.slice(0, pos), !!trimTrailing) + '</' + listType + '>\\n';\n\n          // invert counterType and listType\n          listType = (listType === 'ul') ? 'ol' : 'ul';\n          counterRxg = (listType === 'ul') ? olRgx : ulRgx;\n\n          //recurse\n          parseCL(txt.slice(pos));\n        } else {\n          result += '\\n<' + listType + '>\\n' + processListItems(txt, !!trimTrailing) + '</' + listType + '>\\n';\n        }\n      })(list);\n    } else {\n      result = '\\n<' + listType + '>\\n' + processListItems(list, !!trimTrailing) + '</' + listType + '>\\n';\n    }\n\n    return result;\n  }\n\n  // add sentinel to hack around khtml/safari bug:\n  // http://bugs.webkit.org/show_bug.cgi?id=11231\n  text += '¨0';\n\n  if (globals.gListLevel) {\n    text = text.replace(/^(( {0,3}([*+-]|\\d+[.])[ \\t]+)[^\\r]+?(¨0|\\n{2,}(?=\\S)(?![ \\t]*(?:[*+-]|\\d+[.])[ \\t]+)))/gm,\n      function (wholeMatch, list, m2) {\n        var listType = (m2.search(/[*+-]/g) > -1) ? 'ul' : 'ol';\n        return parseConsecutiveLists(list, listType, true);\n      }\n    );\n  } else {\n    text = text.replace(/(\\n\\n|^\\n?)(( {0,3}([*+-]|\\d+[.])[ \\t]+)[^\\r]+?(¨0|\\n{2,}(?=\\S)(?![ \\t]*(?:[*+-]|\\d+[.])[ \\t]+)))/gm,\n      function (wholeMatch, m1, list, m3) {\n        var listType = (m3.search(/[*+-]/g) > -1) ? 'ul' : 'ol';\n        return parseConsecutiveLists(list, listType, false);\n      }\n    );\n  }\n\n  // strip sentinel\n  text = text.replace(/¨0/, '');\n  text = globals.converter._dispatch('lists.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Remove one level of line-leading tabs or spaces\n */\nshowdown.subParser('outdent', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('outdent.before', text, options, globals);\n\n  // attacklab: hack around Konqueror 3.5.4 bug:\n  // \"----------bug\".replace(/^-/g,\"\") == \"bug\"\n  text = text.replace(/^(\\t|[ ]{1,4})/gm, '¨0'); // attacklab: g_tab_width\n\n  // attacklab: clean up hack\n  text = text.replace(/¨0/g, '');\n\n  text = globals.converter._dispatch('outdent.after', text, options, globals);\n  return text;\n});\n\r\n/**\n *\n */\nshowdown.subParser('paragraphs', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('paragraphs.before', text, options, globals);\n  // Strip leading and trailing lines:\n  text = text.replace(/^\\n+/g, '');\n  text = text.replace(/\\n+$/g, '');\n\n  var grafs = text.split(/\\n{2,}/g),\n      grafsOut = [],\n      end = grafs.length; // Wrap <p> tags\n\n  for (var i = 0; i < end; i++) {\n    var str = grafs[i];\n    // if this is an HTML marker, copy it\n    if (str.search(/¨(K|G)(\\d+)\\1/g) >= 0) {\n      grafsOut.push(str);\n\n    // test for presence of characters to prevent empty lines being parsed\n    // as paragraphs (resulting in undesired extra empty paragraphs)\n    } else if (str.search(/\\S/) >= 0) {\n      str = showdown.subParser('spanGamut')(str, options, globals);\n      str = str.replace(/^([ \\t]*)/g, '<p>');\n      str += '</p>';\n      grafsOut.push(str);\n    }\n  }\n\n  /** Unhashify HTML blocks */\n  end = grafsOut.length;\n  for (i = 0; i < end; i++) {\n    var blockText = '',\n        grafsOutIt = grafsOut[i],\n        codeFlag = false;\n    // if this is a marker for an html block...\n    // use RegExp.test instead of string.search because of QML bug\n    while (/¨(K|G)(\\d+)\\1/.test(grafsOutIt)) {\n      var delim = RegExp.$1,\n          num   = RegExp.$2;\n\n      if (delim === 'K') {\n        blockText = globals.gHtmlBlocks[num];\n      } else {\n        // we need to check if ghBlock is a false positive\n        if (codeFlag) {\n          // use encoded version of all text\n          blockText = showdown.subParser('encodeCode')(globals.ghCodeBlocks[num].text, options, globals);\n        } else {\n          blockText = globals.ghCodeBlocks[num].codeblock;\n        }\n      }\n      blockText = blockText.replace(/\\$/g, '$$$$'); // Escape any dollar signs\n\n      grafsOutIt = grafsOutIt.replace(/(\\n\\n)?¨(K|G)\\d+\\2(\\n\\n)?/, blockText);\n      // Check if grafsOutIt is a pre->code\n      if (/^<pre\\b[^>]*>\\s*<code\\b[^>]*>/.test(grafsOutIt)) {\n        codeFlag = true;\n      }\n    }\n    grafsOut[i] = grafsOutIt;\n  }\n  text = grafsOut.join('\\n');\n  // Strip leading and trailing lines:\n  text = text.replace(/^\\n+/g, '');\n  text = text.replace(/\\n+$/g, '');\n  return globals.converter._dispatch('paragraphs.after', text, options, globals);\n});\n\r\n/**\n * Run extension\n */\nshowdown.subParser('runExtension', function (ext, text, options, globals) {\n  'use strict';\n\n  if (ext.filter) {\n    text = ext.filter(text, globals.converter, options);\n\n  } else if (ext.regex) {\n    // TODO remove this when old extension loading mechanism is deprecated\n    var re = ext.regex;\n    if (!(re instanceof RegExp)) {\n      re = new RegExp(re, 'g');\n    }\n    text = text.replace(re, ext.replace);\n  }\n\n  return text;\n});\n\r\n/**\n * These are all the transformations that occur *within* block-level\n * tags like paragraphs, headers, and list items.\n */\nshowdown.subParser('spanGamut', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('spanGamut.before', text, options, globals);\n  text = showdown.subParser('codeSpans')(text, options, globals);\n  text = showdown.subParser('escapeSpecialCharsWithinTagAttributes')(text, options, globals);\n  text = showdown.subParser('encodeBackslashEscapes')(text, options, globals);\n\n  // Process anchor and image tags. Images must come first,\n  // because ![foo][f] looks like an anchor.\n  text = showdown.subParser('images')(text, options, globals);\n  text = showdown.subParser('anchors')(text, options, globals);\n\n  // Make links out of things like `<http://example.com/>`\n  // Must come after _DoAnchors(), because you can use < and >\n  // delimiters in inline links like [this](<url>).\n  text = showdown.subParser('autoLinks')(text, options, globals);\n  text = showdown.subParser('italicsAndBold')(text, options, globals);\n  text = showdown.subParser('strikethrough')(text, options, globals);\n\n  // we need to hash HTML tags inside spans\n  text = showdown.subParser('hashHTMLSpans')(text, options, globals);\n\n  // now we encode amps and angles\n  text = showdown.subParser('encodeAmpsAndAngles')(text, options, globals);\n\n  // Do hard breaks\n  if (options.simpleLineBreaks) {\n    // GFM style hard breaks\n    text = text.replace(/\\n/g, '<br />\\n');\n  } else {\n    // Vanilla hard breaks\n    text = text.replace(/  +\\n/g, '<br />\\n');\n  }\n\n  text = globals.converter._dispatch('spanGamut.after', text, options, globals);\n  return text;\n});\n\r\nshowdown.subParser('strikethrough', function (text, options, globals) {\n  'use strict';\n\n  if (options.strikethrough) {\n    text = globals.converter._dispatch('strikethrough.before', text, options, globals);\n    text = text.replace(/(?:~){2}([\\s\\S]+?)(?:~){2}/g, '<del>$1</del>');\n    text = globals.converter._dispatch('strikethrough.after', text, options, globals);\n  }\n\n  return text;\n});\n\r\n/**\n * Strips link definitions from text, stores the URLs and titles in\n * hash references.\n * Link defs are in the form: ^[id]: url \"optional title\"\n */\nshowdown.subParser('stripLinkDefinitions', function (text, options, globals) {\n  'use strict';\n\n  var regex = /^ {0,3}\\[(.+)]:[ \\t]*\\n?[ \\t]*<?(\\S+?)>?(?: =([*\\d]+[A-Za-z%]{0,4})x([*\\d]+[A-Za-z%]{0,4}))?[ \\t]*\\n?[ \\t]*(?:(\\n*)[\"|'(](.+?)[\"|')][ \\t]*)?(?:\\n+|(?=¨0))/gm;\n\n  // attacklab: sentinel workarounds for lack of \\A and \\Z, safari\\khtml bug\n  text += '¨0';\n\n  text = text.replace(regex, function (wholeMatch, linkId, url, width, height, blankLines, title) {\n    linkId = linkId.toLowerCase();\n    globals.gUrls[linkId] = showdown.subParser('encodeAmpsAndAngles')(url, options, globals);  // Link IDs are case-insensitive\n\n    if (blankLines) {\n      // Oops, found blank lines, so it's not a title.\n      // Put back the parenthetical statement we stole.\n      return blankLines + title;\n\n    } else {\n      if (title) {\n        globals.gTitles[linkId] = title.replace(/\"|'/g, '&quot;');\n      }\n      if (options.parseImgDimensions && width && height) {\n        globals.gDimensions[linkId] = {\n          width:  width,\n          height: height\n        };\n      }\n    }\n    // Completely remove the definition from the text\n    return '';\n  });\n\n  // attacklab: strip sentinel\n  text = text.replace(/¨0/, '');\n\n  return text;\n});\n\r\nshowdown.subParser('tables', function (text, options, globals) {\n  'use strict';\n\n  if (!options.tables) {\n    return text;\n  }\n\n  var tableRgx = /^ {0,3}\\|?.+\\|.+\\n[ \\t]{0,3}\\|?[ \\t]*:?[ \\t]*(?:-|=){2,}[ \\t]*:?[ \\t]*\\|[ \\t]*:?[ \\t]*(?:-|=){2,}[\\s\\S]+?(?:\\n\\n|¨0)/gm;\n\n  function parseStyles (sLine) {\n    if (/^:[ \\t]*--*$/.test(sLine)) {\n      return ' style=\"text-align:left;\"';\n    } else if (/^--*[ \\t]*:[ \\t]*$/.test(sLine)) {\n      return ' style=\"text-align:right;\"';\n    } else if (/^:[ \\t]*--*[ \\t]*:$/.test(sLine)) {\n      return ' style=\"text-align:center;\"';\n    } else {\n      return '';\n    }\n  }\n\n  function parseHeaders (header, style) {\n    var id = '';\n    header = header.trim();\n    if (options.tableHeaderId) {\n      id = ' id=\"' + header.replace(/ /g, '_').toLowerCase() + '\"';\n    }\n    header = showdown.subParser('spanGamut')(header, options, globals);\n\n    return '<th' + id + style + '>' + header + '</th>\\n';\n  }\n\n  function parseCells (cell, style) {\n    var subText = showdown.subParser('spanGamut')(cell, options, globals);\n    return '<td' + style + '>' + subText + '</td>\\n';\n  }\n\n  function buildTable (headers, cells) {\n    var tb = '<table>\\n<thead>\\n<tr>\\n',\n        tblLgn = headers.length;\n\n    for (var i = 0; i < tblLgn; ++i) {\n      tb += headers[i];\n    }\n    tb += '</tr>\\n</thead>\\n<tbody>\\n';\n\n    for (i = 0; i < cells.length; ++i) {\n      tb += '<tr>\\n';\n      for (var ii = 0; ii < tblLgn; ++ii) {\n        tb += cells[i][ii];\n      }\n      tb += '</tr>\\n';\n    }\n    tb += '</tbody>\\n</table>\\n';\n    return tb;\n  }\n\n  text = globals.converter._dispatch('tables.before', text, options, globals);\n\n  text = text.replace(tableRgx, function (rawTable) {\n\n    var i, tableLines = rawTable.split('\\n');\n\n    // strip wrong first and last column if wrapped tables are used\n    for (i = 0; i < tableLines.length; ++i) {\n      if (/^ {0,3}\\|/.test(tableLines[i])) {\n        tableLines[i] = tableLines[i].replace(/^ {0,3}\\|/, '');\n      }\n      if (/\\|[ \\t]*$/.test(tableLines[i])) {\n        tableLines[i] = tableLines[i].replace(/\\|[ \\t]*$/, '');\n      }\n    }\n\n    var rawHeaders = tableLines[0].split('|').map(function (s) { return s.trim();}),\n        rawStyles = tableLines[1].split('|').map(function (s) { return s.trim();}),\n        rawCells = [],\n        headers = [],\n        styles = [],\n        cells = [];\n\n    tableLines.shift();\n    tableLines.shift();\n\n    for (i = 0; i < tableLines.length; ++i) {\n      if (tableLines[i].trim() === '') {\n        continue;\n      }\n      rawCells.push(\n        tableLines[i]\n          .split('|')\n          .map(function (s) {\n            return s.trim();\n          })\n      );\n    }\n\n    if (rawHeaders.length < rawStyles.length) {\n      return rawTable;\n    }\n\n    for (i = 0; i < rawStyles.length; ++i) {\n      styles.push(parseStyles(rawStyles[i]));\n    }\n\n    for (i = 0; i < rawHeaders.length; ++i) {\n      if (showdown.helper.isUndefined(styles[i])) {\n        styles[i] = '';\n      }\n      headers.push(parseHeaders(rawHeaders[i], styles[i]));\n    }\n\n    for (i = 0; i < rawCells.length; ++i) {\n      var row = [];\n      for (var ii = 0; ii < headers.length; ++ii) {\n        if (showdown.helper.isUndefined(rawCells[i][ii])) {\n\n        }\n        row.push(parseCells(rawCells[i][ii], styles[ii]));\n      }\n      cells.push(row);\n    }\n\n    return buildTable(headers, cells);\n  });\n\n  text = globals.converter._dispatch('tables.after', text, options, globals);\n\n  return text;\n});\n\r\n/**\n * Swap back in all the special characters we've hidden.\n */\nshowdown.subParser('unescapeSpecialChars', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('unescapeSpecialChars.before', text, options, globals);\n\n  text = text.replace(/¨E(\\d+)E/g, function (wholeMatch, m1) {\n    var charCodeToReplace = parseInt(m1);\n    return String.fromCharCode(charCodeToReplace);\n  });\n\n  text = globals.converter._dispatch('unescapeSpecialChars.after', text, options, globals);\n  return text;\n});\n\r\nvar root = this;\n\n// CommonJS/nodeJS Loader\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = showdown;\n\n// AMD Loader\n} else if (typeof define === 'function' && define.amd) {\n  define(function () {\n    'use strict';\n    return showdown;\n  });\n\n// Regular Browser loader\n} else {\n  root.showdown = showdown;\n}\n}).call(this);\r\n\n//# sourceMappingURL=showdown.js.map\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/showdown/dist/showdown.js\n// module id = 524\n// module chunks = 14 15","<template>\n  <div class=\"app-container\">\n    <code>会补动态换肤的教程</code>\n    <el-card class=\"box-card\">\n      <div slot=\"header\">\n        <span style=\"line-height: 36px;\">偏好设置</span>\n      </div>\n\n      <div class=\"box-item\">\n        <span class=\"field-label\">换肤:</span>\n        <el-switch v-model=\"theme\" on-text=\"\" off-text=\"\">\n        </el-switch>\n      </div>\n    </el-card>\n\n    <div class=\"block\">\n      <span class=\"demonstration\">Button: </span>\n      <span class=\"wrapper\">\n        <el-button type=\"success\">成功按钮</el-button>\n        <el-button type=\"warning\">警告按钮</el-button>\n        <el-button type=\"danger\">危险按钮</el-button>\n        <el-button type=\"info\">信息按钮</el-button>\n       </span>\n    </div>\n\n    <div class=\"block\">\n      <el-tag class='tag-item' v-for=\"tag in tags\" :type=\"tag.type\" :key='tag.type'>\n        {{tag.name}}\n      </el-tag>\n    </div>\n\n    <div class=\"block\">\n      <el-alert class='alert-item' title=\"成功提示的文案\" type=\"success\">\n      </el-alert>\n      <el-alert class='alert-item' title=\"消息提示的文案\" type=\"info\">\n      </el-alert>\n      <el-alert class='alert-item' title=\"警告提示的文案\" type=\"warning\">\n      </el-alert>\n      <el-alert class='alert-item' title=\"错误提示的文案\" type=\"error\">\n      </el-alert>\n    </div>\n\n  </div>\n</template>\n\n\n<script>\nimport { toggleClass } from 'utils';\n\nexport default {\n  data() {\n    return {\n      theme: '',\n      tags: [\n          { name: '标签一', type: '' },\n          { name: '标签二', type: 'gray' },\n          { name: '标签三', type: 'primary' },\n          { name: '标签四', type: 'success' },\n          { name: '标签五', type: 'warning' },\n          { name: '标签六', type: 'danger' }\n      ],\n      inputVisible: false,\n      inputValue: ''\n    }\n  },\n  watch: {\n    theme() {\n      toggleClass(document.body, 'custom-theme')\n        //   this.$store.dispatch('setTheme', value);\n    }\n  },\n  methods: {\n\n  }\n};\n</script>\n\n<style scoped>\n.box-card{\n  width: 400px;\n  margin: 20px auto;\n}\n.block{\n  padding: 30px 24px;\n}\n.alert-item{\n  margin-bottom: 10px;\n}\n.tag-item{\n  margin-right: 15px;\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// index.vue?57f9d662","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".box-card[data-v-6542018a]{width:400px;margin:20px auto}.block[data-v-6542018a]{padding:30px 24px}.alert-item[data-v-6542018a]{margin-bottom:10px}.tag-item[data-v-6542018a]{margin-right:15px}\", \"\", {\"version\":3,\"sources\":[\"/./src/views/theme/index.vue\"],\"names\":[],\"mappings\":\"AACA,2BACE,YAAa,AACb,gBAAkB,CACnB,AACD,wBACE,iBAAmB,CACpB,AACD,6BACE,kBAAoB,CACrB,AACD,2BACE,iBAAmB,CACpB\",\"file\":\"index.vue\",\"sourcesContent\":[\"\\n.box-card[data-v-6542018a]{\\n  width: 400px;\\n  margin: 20px auto;\\n}\\n.block[data-v-6542018a]{\\n  padding: 30px 24px;\\n}\\n.alert-item[data-v-6542018a]{\\n  margin-bottom: 10px;\\n}\\n.tag-item[data-v-6542018a]{\\n  margin-right: 15px;\\n}\\n\"],\"sourceRoot\":\"webpack://\"}]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/vue-loader/lib/style-compiler?{\"id\":\"data-v-6542018a\",\"scoped\":true,\"hasInlineConfig\":false}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/views/theme/index.vue\n// module id = 629\n// module chunks = 15","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/css-loader/index.js?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"id\\\":\\\"data-v-6542018a\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./index.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../../../node_modules/vue-style-loader/lib/addStylesClient.js\")(\"54e31c2c\", content, true);\n// Hot Module Replacement\nif(module.hot) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../../../node_modules/css-loader/index.js?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"id\\\":\\\"data-v-6542018a\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./index.vue\", function() {\n     var newContent = require(\"!!../../../node_modules/css-loader/index.js?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"id\\\":\\\"data-v-6542018a\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./index.vue\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/extract-text-webpack-plugin/loader.js?{\"omit\":1,\"remove\":true}!./~/vue-style-loader!./~/css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/vue-loader/lib/style-compiler?{\"id\":\"data-v-6542018a\",\"scoped\":true,\"hasInlineConfig\":false}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/views/theme/index.vue\n// module id = 686\n// module chunks = 15","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"app-container\"\n  }, [_c('code', [_vm._v(\"会补动态换肤的教程\")]), _vm._v(\" \"), _c('el-card', {\n    staticClass: \"box-card\"\n  }, [_c('div', {\n    slot: \"header\"\n  }, [_c('span', {\n    staticStyle: {\n      \"line-height\": \"36px\"\n    }\n  }, [_vm._v(\"偏好设置\")])]), _vm._v(\" \"), _c('div', {\n    staticClass: \"box-item\"\n  }, [_c('span', {\n    staticClass: \"field-label\"\n  }, [_vm._v(\"换肤:\")]), _vm._v(\" \"), _c('el-switch', {\n    attrs: {\n      \"on-text\": \"\",\n      \"off-text\": \"\"\n    },\n    model: {\n      value: (_vm.theme),\n      callback: function($$v) {\n        _vm.theme = $$v\n      },\n      expression: \"theme\"\n    }\n  })], 1)]), _vm._v(\" \"), _c('div', {\n    staticClass: \"block\"\n  }, [_c('span', {\n    staticClass: \"demonstration\"\n  }, [_vm._v(\"Button: \")]), _vm._v(\" \"), _c('span', {\n    staticClass: \"wrapper\"\n  }, [_c('el-button', {\n    attrs: {\n      \"type\": \"success\"\n    }\n  }, [_vm._v(\"成功按钮\")]), _vm._v(\" \"), _c('el-button', {\n    attrs: {\n      \"type\": \"warning\"\n    }\n  }, [_vm._v(\"警告按钮\")]), _vm._v(\" \"), _c('el-button', {\n    attrs: {\n      \"type\": \"danger\"\n    }\n  }, [_vm._v(\"危险按钮\")]), _vm._v(\" \"), _c('el-button', {\n    attrs: {\n      \"type\": \"info\"\n    }\n  }, [_vm._v(\"信息按钮\")])], 1)]), _vm._v(\" \"), _c('div', {\n    staticClass: \"block\"\n  }, _vm._l((_vm.tags), function(tag) {\n    return _c('el-tag', {\n      key: tag.type,\n      staticClass: \"tag-item\",\n      attrs: {\n        \"type\": tag.type\n      }\n    }, [_vm._v(\"\\n      \" + _vm._s(tag.name) + \"\\n    \")])\n  })), _vm._v(\" \"), _c('div', {\n    staticClass: \"block\"\n  }, [_c('el-alert', {\n    staticClass: \"alert-item\",\n    attrs: {\n      \"title\": \"成功提示的文案\",\n      \"type\": \"success\"\n    }\n  }), _vm._v(\" \"), _c('el-alert', {\n    staticClass: \"alert-item\",\n    attrs: {\n      \"title\": \"消息提示的文案\",\n      \"type\": \"info\"\n    }\n  }), _vm._v(\" \"), _c('el-alert', {\n    staticClass: \"alert-item\",\n    attrs: {\n      \"title\": \"警告提示的文案\",\n      \"type\": \"warning\"\n    }\n  }), _vm._v(\" \"), _c('el-alert', {\n    staticClass: \"alert-item\",\n    attrs: {\n      \"title\": \"错误提示的文案\",\n      \"type\": \"error\"\n    }\n  })], 1)], 1)\n},staticRenderFns: []}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-6542018a\"}!./~/vue-loader/lib/selector.js?type=template&index=0!./src/views/theme/index.vue\n// module id = 762\n// module chunks = 15"],"sourceRoot":""}